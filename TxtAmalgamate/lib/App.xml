<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App</name>
    </assembly>
    <members>
        <member name="T:App.WebVerKey">
            <summary>程序运行验证</summary>
        </member>
        <member name="F:App.WebVerKey._IsRun">
            <summary>运行状态</summary>
        </member>
        <member name="F:App.WebVerKey._VersionNumber">
            <summary>系统版本</summary>
        </member>
        <member name="F:App.WebVerKey._StatTime">
            <summary>开始日期</summary>
        </member>
        <member name="F:App.WebVerKey._EndTime">
            <summary>结束日期</summary>
        </member>
        <member name="F:App.WebVerKey._Urls">
            <summary>有效域名或ip集合</summary>
        </member>
        <member name="F:App.WebVerKey._ErrStr">
            <summary>检测失败时返回的错误信息</summary>
        </member>
        <member name="M:App.WebVerKey.SetIsRun(System.Boolean)">
            <summary>
            设置运行状态
            </summary>
            <param name="isrun">设置值</param>
        </member>
        <member name="M:App.WebVerKey.SetIsRun(System.String,System.String)">
            <summary>
            设置运行状态
            </summary>
            <param name="skey">密匙</param>
            <param name="surl">url</param>
        </member>
        <member name="M:App.WebVerKey.IsUrlVer(System.String,System.String)">
            <summary>
            返回输入的域名或Ip是否有效
            </summary>
            <param name="urls">绑定的域名或ip集合</param>
            <param name="surl">输入的域名或ip</param>
            <returns>返回输入的域名或Ip是否有效</returns>
        </member>
        <member name="M:App.WebVerKey.GetRunKey(System.String,System.String,System.String,System.String)">
            <summary>
            返回系统运行密匙
            </summary>
            <param name="sta">开始日期字符串</param>
            <param name="stb">结束日期字符串</param>
            <param name="urls">有效域名或ip集合</param>
            <param name="vs">系统版本</param>
            <returns>返回系统运行密匙</returns>
        </member>
        <member name="M:App.WebVerKey.DeRunKey(System.String)">
            <summary>返回验证密匙是否有效，有效则返回true,否则返回false</summary>
            <param name="skey">密匙</param>
            <returns>返回验证密匙是否有效，有效则返回true,否则返回false</returns>
        </member>
        <member name="M:App.WebVerKey.DeRunKey(System.String,System.String)">
            <summary>返回验证密匙是否有效，有效则返回true,否则返回false</summary>
            <param name="skey">密匙</param>
            <param name="sysvs">系统版本</param>
            <returns>返回验证密匙是否有效，有效则返回true,否则返回false</returns>
        </member>
        <member name="M:App.WebVerKey.OutDeKey(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>获取验证密匙信息</summary>
            <param name="skey">密匙</param>
            <param name="vs">返回系统内置版本</param>
            <param name="srqs">返回开始日期字符串</param>
            <param name="erqs">返回结束日期字符串</param>
            <param name="urls">返回有效域名或ip集合</param>
            <param name="vkey">返回验证密匙</param>
            <param name="rans">返回扩展加密字符串</param>
        </member>
        <member name="P:App.WebVerKey.IsRun">
            <summary>运行状态</summary>
        </member>
        <member name="P:App.WebVerKey.VersionNumber">
            <summary>系统版本</summary>
        </member>
        <member name="P:App.WebVerKey.StatTime">
            <summary>开始日期</summary>
        </member>
        <member name="P:App.WebVerKey.EndTime">
            <summary>结束日期</summary>
        </member>
        <member name="P:App.WebVerKey.Urls">
            <summary>有效域名或ip集合</summary>
        </member>
        <member name="P:App.WebVerKey.ErrStr">
            <summary>检测失败时返回的错误信息</summary>
        </member>
        <member name="T:App.ValTxt">
            <summary>存储一个健和文本值</summary>
        </member>
        <member name="F:App.ValTxt._Value">
            <summary>获取或设置健(默认值：空字符串)</summary>
        </member>
        <member name="F:App.ValTxt._Text">
            <summary>获取或设置文本值(默认值：空字符串)</summary>
        </member>
        <member name="M:App.ValTxt.#ctor">
            <summary>构造类</summary>
            <returns></returns>
        </member>
        <member name="M:App.ValTxt.#ctor(System.String)">
            <summary>使用单一值填充健及文本构造类</summary>
            <param name="value">值(该值将填充健及文本)</param>
            <returns></returns>
        </member>
        <member name="M:App.ValTxt.#ctor(System.String,System.String)">
            <summary>使用健及文本值构造类</summary>
            <param name="value">健</param>
            <param name="text">文本值</param>
            <returns></returns>
        </member>
        <member name="M:App.ValTxt.ToString">
            <summary>返回文本值</summary>
            <returns>返回文本值</returns>
        </member>
        <member name="P:App.ValTxt.Value">
            <summary>获取或设置健(默认值：空字符串)</summary>
        </member>
        <member name="P:App.ValTxt.Text">
            <summary>获取或设置文本值(默认值：空字符串)</summary>
        </member>
        <member name="T:App.RegEdit">
            <summary>注册表操作类</summary>
        </member>
        <member name="F:App.RegEdit._Regkey">
            <summary>获取或设置Windows注册表中的项级节点(默认值：null)</summary>
        </member>
        <member name="F:App.RegEdit._WriTable">
            <summary>获取或设置是否对打开的注册表拥有写权限(默认值：false)</summary>
        </member>
        <member name="F:App.RegEdit._RegPath">
            <summary>获取或设置要打开的注册表子项的名称或路径(默认值：空字符串)</summary>
        </member>
        <member name="F:App.RegEdit._RegName">
            <summary>获取或设置注册表键名称(默认值：空字符串)</summary>
        </member>
        <member name="F:App.RegEdit._RegValue">
            <summary>获取或设置注册表键值(默认值：空字符串)</summary>
        </member>
        <member name="F:App.RegEdit._RegValueKind">
            <summary>获取或设置注册表键值的类型(默认值：RegistryValueKind.String)</summary>
        </member>
        <member name="M:App.RegEdit.#ctor">
            <summary>构造类</summary>
            <returns></returns>
        </member>
        <member name="M:App.RegEdit.#ctor(System.Byte)">
            <summary>使用Windows注册表中的项级节点构造类</summary>
            <param name="rk">项级节点对象标示
            <para>1：返回 Registry.ClassesRoot  定义文档的类型（或类）以及与那些类型关联的属性。该字段读取 Windows 注册表基项 HKEY_CLASSES_ROOT。</para>
            <para>2：返回 Registry.CurrentConfig 包含有关非用户特定的硬件的配置信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_CONFIG。</para>
            <para>3：返回 Registry.CurrentUser 包含有关当前用户首选项的信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_USER。</para>
            <para>4：返回 Registry.DynData 包含动态注册表数据。该字段读取 Windows 注册表基项 HKEY_DYN_DATA。</para>
            <para>5：返回 Registry.LocalMachine 包含本地计算机的配置数据。该字段读取 Windows 注册表基项 HKEY_LOCAL_MACHINE。</para>
            <para>6：返回 Registry.PerformanceData 包含软件组件的性能信息。该字段读取 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</para>
            <para>7：返回 Registry.Users 包含有关默认用户配置的信息。该字段读取 Windows 注册表基项 HKEY_USERS。</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:App.RegEdit.#ctor(System.Byte,System.Boolean)">
            <summary>使用Windows注册表中的项级节点及权限构造类</summary>
            <param name="rk">项级节点对象标示
            <para>1：返回 Registry.ClassesRoot  定义文档的类型（或类）以及与那些类型关联的属性。该字段读取 Windows 注册表基项 HKEY_CLASSES_ROOT。</para>
            <para>2：返回 Registry.CurrentConfig 包含有关非用户特定的硬件的配置信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_CONFIG。</para>
            <para>3：返回 Registry.CurrentUser 包含有关当前用户首选项的信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_USER。</para>
            <para>4：返回 Registry.DynData 包含动态注册表数据。该字段读取 Windows 注册表基项 HKEY_DYN_DATA。</para>
            <para>5：返回 Registry.LocalMachine 包含本地计算机的配置数据。该字段读取 Windows 注册表基项 HKEY_LOCAL_MACHINE。</para>
            <para>6：返回 Registry.PerformanceData 包含软件组件的性能信息。该字段读取 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</para>
            <para>7：返回 Registry.Users 包含有关默认用户配置的信息。该字段读取 Windows 注册表基项 HKEY_USERS。</para>
            </param>
            <param name="wt">是否对打开的注册表拥有写权限</param>
            <returns></returns>
        </member>
        <member name="M:App.RegEdit.#ctor(System.Byte,System.Boolean,System.Byte)">
            <summary>使用Windows注册表中的项级节点及权限构造类</summary>
            <param name="rk">项级节点对象标示
            <para>1：返回 Registry.ClassesRoot  定义文档的类型（或类）以及与那些类型关联的属性。该字段读取 Windows 注册表基项 HKEY_CLASSES_ROOT。</para>
            <para>2：返回 Registry.CurrentConfig 包含有关非用户特定的硬件的配置信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_CONFIG。</para>
            <para>3：返回 Registry.CurrentUser 包含有关当前用户首选项的信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_USER。</para>
            <para>4：返回 Registry.DynData 包含动态注册表数据。该字段读取 Windows 注册表基项 HKEY_DYN_DATA。</para>
            <para>5：返回 Registry.LocalMachine 包含本地计算机的配置数据。该字段读取 Windows 注册表基项 HKEY_LOCAL_MACHINE。</para>
            <para>6：返回 Registry.PerformanceData 包含软件组件的性能信息。该字段读取 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</para>
            <para>7：返回 Registry.Users 包含有关默认用户配置的信息。该字段读取 Windows 注册表基项 HKEY_USERS。</para>
            </param>
            <param name="wt">是否对打开的注册表拥有写权限</param>
            <param name="rvk">键值的类型标示
            <para>1：返回 RegistryValueKind.Binary  指定任意格式的二进制数据。此值与 Win32 API 注册表数据类型 REG_BINARY 等效。</para>
            <para>2：返回 RegistryValueKind.DWord 指定一个 32 位二进制数。此值与 Win32 API 注册表数据类型 REG_DWORD 等效。</para>
            <para>3：返回 RegistryValueKind.ExpandString 指定一个以 NULL 结尾的字符串，该字符串中包含对环境变量（如 %PATH%，当值被检索时，就会展开）的未展开的引用。此值与 Win32 API 注册表数据类型 REG_EXPAND_SZ 等效。 </para>
            <para>4：返回 RegistryValueKind.MultiString 指定一个以 NULL 结尾的字符串数组，以两个空字符结束。此值与 Win32 API 注册表数据类型 REG_MULTI_SZ 等效。</para>
            <para>5：返回 RegistryValueKind.QWord 指定一个 64 位二进制数。此值与 Win32 API 注册表数据类型 REG_QWORD 等效。</para>
            <para>6：返回 RegistryValueKind.String 指定一个以 Null 结尾的字符串。此值与 Win32 API 注册表数据类型 REG_SZ 等效。</para>
            <para>7：返回 RegistryValueKind.Unknown 指示一个不受支持的注册表数据类型。例如，不支持 Microsoft Win32 API 注册表数据类型 REG_RESOURCE_LIST。使用此值指定 SetValue 方法应在存储名称/值对时确定适当的注册表数据类型。</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:App.RegEdit.GetRegistryKey(System.Byte)">
            <summary>返回Windows注册表中的项级节点对象(默认返回Registry.LocalMachine)</summary>
            <param name="rk">项级节点对象标示
            <para>1：返回 Registry.ClassesRoot  定义文档的类型（或类）以及与那些类型关联的属性。该字段读取 Windows 注册表基项 HKEY_CLASSES_ROOT。</para>
            <para>2：返回 Registry.CurrentConfig 包含有关非用户特定的硬件的配置信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_CONFIG。</para>
            <para>3：返回 Registry.CurrentUser 包含有关当前用户首选项的信息。该字段读取 Windows 注册表基项 HKEY_CURRENT_USER。</para>
            <para>4：返回 Registry.DynData 包含动态注册表数据。该字段读取 Windows 注册表基项 HKEY_DYN_DATA。</para>
            <para>5：返回 Registry.LocalMachine 包含本地计算机的配置数据。该字段读取 Windows 注册表基项 HKEY_LOCAL_MACHINE。</para>
            <para>6：返回 Registry.PerformanceData 包含软件组件的性能信息。该字段读取 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</para>
            <para>7：返回 Registry.Users 包含有关默认用户配置的信息。该字段读取 Windows 注册表基项 HKEY_USERS。</para>
            </param>
            <returns>返回Windows注册表中的项级节点对象</returns>
        </member>
        <member name="M:App.RegEdit.GetRegistryValueKind(System.Byte)">
            <summary>返回注册表键值的类型(默认返回RegistryValueKind.String)</summary>
            <param name="rvk">键值的类型标示
            <para>1：返回 RegistryValueKind.Binary  指定任意格式的二进制数据。此值与 Win32 API 注册表数据类型 REG_BINARY 等效。</para>
            <para>2：返回 RegistryValueKind.DWord 指定一个 32 位二进制数。此值与 Win32 API 注册表数据类型 REG_DWORD 等效。</para>
            <para>3：返回 RegistryValueKind.ExpandString 指定一个以 NULL 结尾的字符串，该字符串中包含对环境变量（如 %PATH%，当值被检索时，就会展开）的未展开的引用。此值与 Win32 API 注册表数据类型 REG_EXPAND_SZ 等效。 </para>
            <para>4：返回 RegistryValueKind.MultiString 指定一个以 NULL 结尾的字符串数组，以两个空字符结束。此值与 Win32 API 注册表数据类型 REG_MULTI_SZ 等效。</para>
            <para>5：返回 RegistryValueKind.QWord 指定一个 64 位二进制数。此值与 Win32 API 注册表数据类型 REG_QWORD 等效。</para>
            <para>6：返回 RegistryValueKind.String 指定一个以 Null 结尾的字符串。此值与 Win32 API 注册表数据类型 REG_SZ 等效。</para>
            <para>7：返回 RegistryValueKind.Unknown 指示一个不受支持的注册表数据类型。例如，不支持 Microsoft Win32 API 注册表数据类型 REG_RESOURCE_LIST。使用此值指定 SetValue 方法应在存储名称/值对时确定适当的注册表数据类型。</para>
            </param>
            <returns>返回注册表键值的类型</returns>
        </member>
        <member name="M:App.RegEdit.IsKeyExit">
            <summary>判断注册表项是否存在，如果存在返回true，否则返回false</summary>
            <returns>判断注册表项是否存在，如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.IsKeyExit(System.String)">
            <summary>判断注册表项是否存在，如果存在返回true，否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <returns>判断注册表项是否存在，如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.IsValueExit">
            <summary>判断注册表键值是否存在，如果存在返回true，否则返回false</summary>
            <returns>判断注册表键值是否存在，如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.IsValueExit(System.String)">
            <summary>判断注册表键值是否存在，如果存在返回true，否则返回false</summary>
            <param name="regName">注册表键名称</param>
            <returns>判断注册表键值是否存在，如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.IsValueExit(System.String,System.String)">
            <summary>判断注册表键值是否存在，如果存在返回true，否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <param name="regName">注册表键名称</param>
            <returns>判断注册表键值是否存在，如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.CreateKey">
            <summary>创建注册表子项，如果该注册表子项已经存在则不创建，创建成功返回true,否则返回false</summary>
            <returns>创建成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.CreateKey(System.String)">
            <summary>创建注册表子项，如果该注册表子项已经存在则不创建，创建成功返回true,否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <returns>创建成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.DeleteKey">
            <summary>删除一个注册表子项，删除成功返回true,否则返回false</summary>
            <returns>删除成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.DeleteKey(System.String)">
            <summary>删除一个注册表子项，删除成功返回true,否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <returns>删除成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.SetKey">
            <summary>创建或设置一个注册表键，创建或设置成功返回true,否则返回false</summary>
            <returns>创建或设置成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.SetKey(System.String)">
            <summary>创建或设置一个注册表键，创建或设置成功返回true,否则返回false</summary>
            <param name="regName">注册表键名称</param>
            <returns>创建或设置成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.SetKey(System.String,System.String)">
            <summary>创建或设置一个注册表键，并设置该键的值，创建或设置成功返回true,否则返回false</summary>
            <param name="regName">注册表键名称</param>
            <param name="regValue">注册表键值</param>
            <returns>创建或设置成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.SetKey(System.String,System.String,System.String)">
            <summary>创建或设置一个注册表键，并设置该键的值，创建或设置成功返回true,否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <param name="regName">注册表键名称</param>
            <param name="regValue">注册表键值</param>
            <returns>创建或设置成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.SetKey(System.String,System.String,System.String,Microsoft.Win32.RegistryValueKind)">
            <summary>创建或设置一个注册表键，并设置该键的值，创建或设置成功返回true,否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <param name="regName">注册表键名称</param>
            <param name="regValue">注册表键值</param>
            <param name="regValueKind">注册表键值的类型</param>
            <returns>创建或设置成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.DeleteValue">
            <summary>删除一个注册表键，删除成功返回true,否则返回false</summary>
            <returns>删除成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.DeleteValue(System.String)">
            <summary>删除一个注册表键，删除成功返回true,否则返回false</summary>
            <param name="regName">注册表键名称</param>
            <returns>删除成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.DeleteValue(System.String,System.String)">
            <summary>删除一个注册表键，删除成功返回true,否则返回false</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <param name="regName">注册表键名称</param>
            <returns>删除成功返回true,否则返回false</returns>
        </member>
        <member name="M:App.RegEdit.ReadKey">
            <summary>返回一个注册表键的值。</summary>
            <returns>返回一个注册表键的值。</returns>
        </member>
        <member name="M:App.RegEdit.ReadKey(System.String)">
            <summary>返回一个注册表键的值。</summary>
            <param name="regName">注册表键名称</param>
            <returns>返回一个注册表键的值。</returns>
        </member>
        <member name="M:App.RegEdit.ReadKey(System.String,System.String)">
            <summary>返回一个注册表键的值。</summary>
            <param name="regPath">注册表子项的名称或路径</param>
            <param name="regName">注册表键名称</param>
            <returns>返回一个注册表键的值。</returns>
        </member>
        <member name="M:App.RegEdit.RegAutoRun(System.String,System.String,System.Boolean)">
            <summary>
            注册应用程序开机自动运行
            </summary>
            <param name="name">注册键名称</param>
            <param name="fileName">开机自动运行程序的路径</param>
            <param name="isAutoRun">如果开机自动运行则为true 否则为false</param>
        </member>
        <member name="P:App.RegEdit.Regkey">
            <summary>获取或设置Windows注册表中的项级节点(默认值：null)</summary>
        </member>
        <member name="P:App.RegEdit.WriTable">
            <summary>获取或设置是否对打开的注册表拥有写权限(默认值：false)</summary>
        </member>
        <member name="P:App.RegEdit.RegPath">
            <summary>获取或设置要打开的注册表子项的名称或路径(默认值：空字符串)</summary>
        </member>
        <member name="P:App.RegEdit.RegName">
            <summary>获取或设置注册表键名称(默认值：空字符串)</summary>
        </member>
        <member name="P:App.RegEdit.RegValue">
            <summary>获取或设置注册表键值(默认值：空字符串)</summary>
        </member>
        <member name="P:App.RegEdit.RegValueKind">
            <summary>获取或设置注册表键值的类型(默认值：RegistryValueKind.String)</summary>
        </member>
        <member name="T:App.ISetDataInfo">
            <summary>设置DataConn数据库连接对象操作类接口</summary> 
        </member>
        <member name="M:App.ISetDataInfo.ConfigSet">
            <summary>使用配置设置DataInfo对象属性</summary>
        </member>
        <member name="M:App.ISetDataInfo.ConfigSet(System.String)">
            <summary>使用配置设置DataInfo对象属性</summary>
            <param name="vstr">验证字符串</param>
        </member>
        <member name="M:App.ISetDataInfo.ConfigSet(App.DataInfo,System.Configuration.Configuration,System.String,System.String,System.String)">
            <summary>使用配置设置DataInfo对象属性</summary>
            <param name="obj">DataInfo对象</param>
            <param name="config">配置对象</param>
            <param name="connName">配置节名称</param>
            <param name="configName">配置名称</param>
            <param name="vstr">验证字符串</param>
        </member>
        <member name="P:App.ISetDataInfo.DataInfoOp">
            <summary>获取或设置需要配置的DataInfo对象(默认值：null)</summary>
        </member>
        <member name="P:App.ISetDataInfo.Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="P:App.ISetDataInfo.ConnName">
            <summary>获取或设置配置节名称(默认值：AppConnStrings)</summary>
        </member>
        <member name="P:App.ISetDataInfo.ConfigName">
            <summary>获取或设置配置名称(默认值：default)</summary>
        </member>
        <member name="T:App.DataInfoConfig">
            <summary>数据库连接对象操作配置类</summary>
        </member>
        <member name="P:App.DataInfoConfig.ConnStrings">
            <summary>设置或获取数据库连接对象操作配置子元素集合</summary>
        </member>
        <member name="T:App.DataInfoConfigElements">
            <summary>数据库连接对象操作配置类子元素集合</summary>
        </member>
        <member name="M:App.DataInfoConfigElements.CreateNewElement">
            <summary>返回一个新的数据库连接对象操作配置子元素</summary>
            <returns>返回一个新的数据库连接对象操作配置子元素</returns>
        </member>
        <member name="M:App.DataInfoConfigElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>返回数据库连接对象操作配置元素的名称</summary>
            <param name="element">配置元素</param>
            <returns>返回数据库连接对象操作配置元素的名称</returns>
        </member>
        <member name="P:App.DataInfoConfigElements.Item(System.String)">
            <summary>返回指定元素名称数据库连接对象操作配置子元素</summary>
            <param name="name">元素名称</param>
            <returns>返回指定元素名称数据库连接对象操作配置子元素</returns>
        </member>
        <member name="P:App.DataInfoConfigElements.Item(System.Int32)">
            <summary>返回指定索引位置的数据库连接对象操作配置子元素</summary>
            <param name="index">索引位置</param>
            <returns>返回指定索引位置的数据库连接对象操作配置子元素</returns>
        </member>
        <member name="T:App.DataInfoConfigElement">
            <summary>数据库连接对象操作配置子元素</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.Name">
            <summary>数据库连接子元素名称</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.SqlType">
            <summary>数据库连接类型，OleDb: oledb 、Sql server: sql 、Oracl: oracl(默认值：oledb)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.OleDbConnString">
            <summary>OleDb数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.SqlConnString">
            <summary>Sql数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.OraclConnString">
            <summary>Oracl数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.CommandTimeout">
            <summary>执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.OpName">
            <summary>数据操作接口名称，Access: acc 、Sql server: sql 、Oracl: oracl 、MySql: mysql(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataInfoConfigElement.Keys">
            <summary>数据库验证密匙</summary>
        </member>
        <member name="T:App.Often">
            <summary>常用静态方法操作类</summary>
        </member>
        <member name="F:App.Often._Seed">
            <summary>设置或获取随即种子(默认值：-99999999)</summary> 
        </member>
        <member name="F:App.Often.VersionNumber">
            <summary>设置或获取系统版本号(默认值：1.0.0.0)</summary> 
        </member>
        <member name="F:App.Often.BasePath">
            <summary>设置或获取静态应用程序跟路径(默认值：空字符串)</summary> 
        </member>
        <member name="M:App.Often.AddStr(System.Text.StringBuilder@,System.String)">
            <summary>将指定字符串尾部追加字符串,如果原字符串不为空,则追加小写逗号分隔符</summary>
            <param name="sbs">可变字符串</param>
            <param name="str">需要追加的字符串</param>
        </member>
        <member name="M:App.Often.AddStr(System.Text.StringBuilder@,System.String,System.String)">
            <summary>将指定字符串尾部追加字符串,如果原字符串不为空,则追加指定分隔符</summary>
            <param name="sbs">可变字符串</param>
            <param name="str">需要追加的字符串</param>
            <param name="separate">分隔符</param>
        </member>
        <member name="M:App.Often.AddStr(System.String,System.String)">
            <summary>将指定字符串尾部追加字符串,如果原字符串不为空,则追加小写逗号分隔符</summary>
            <param name="sbs">字符串</param>
            <param name="str">需要追加的字符串</param>
        </member>
        <member name="M:App.Often.AddStr(System.String,System.String,System.String)">
            <summary>将指定字符串尾部追加字符串,如果原字符串不为空,则追加指定分隔符</summary>
            <param name="sbs">字符串</param>
            <param name="str">需要追加的字符串</param>
            <param name="separate">分隔符</param>
        </member>
        <member name="M:App.Often.Filter(System.String)">
            <summary>过滤SQL危险字符串</summary>
            <param name="strIn">要过滤的字符串</param>
            <returns>返回已过滤的字符串</returns>
        </member>
        <member name="M:App.Often.Split(System.String,System.String)">
            <summary>返回由指定String分隔的String类型一维数组。</summary>
            <param name="str">包含子字符串和分隔符的 String 表达式</param>
            <param name="spStr">分隔此实例中子字符串的Unicode字符串、不包含分隔符的空字符串或空引用</param>
            <returns>返回String类型一维数组</returns>
        </member>
        <member name="M:App.Often.GetRegStr(System.String)">
            <summary>返回字符串的正则表达式格式</summary>
            <param name="inStr">输入的字符串</param>
            <returns>返回字符串的正则表达式格式</returns>
        </member>
        <member name="M:App.Often.GetIdsFormat(System.String)">
            <summary>格式化Id集合(字符效验为数字效验、分隔字符：, 返回值分隔字符,)</summary>
            <param name="inStr">需要效验的Id集合字符串</param>
            <returns>返回已格式化的Id集合</returns>
        </member>
        <member name="M:App.Often.GetIdsFormat(System.String,System.Byte)">
            <summary>格式化Id集合</summary>
            <param name="inStr">需要效验的Id集合字符串</param>
            <param name="style">类型效验。0 数字检验 ,1 字符串检验 ,2 日期检验,3 整数检验</param>
            <returns>返回已格式化的Id集合</returns>
        </member>
        <member name="M:App.Often.GetIdsFormat(System.String,System.Byte,System.String)">
            <summary>格式化Id集合</summary>
            <param name="inStr">需要效验的Id集合字符串</param>
            <param name="style">类型效验。0 数字检验 ,1 字符串检验 ,2 日期检验,3 正则表达式检验</param>
            <param name="regStr">使用正则表达式检验时的正则表达式</param>
            <returns>返回已格式化的Id集合</returns>
        </member>
        <member name="M:App.Often.GetIdsFormat(System.String,System.Byte,System.String,System.String)">
            <summary>格式化Id集合</summary>
            <param name="inStr">需要效验的Id集合字符串</param>
            <param name="style">类型效验。0 数字检验 ,1 字符串检验 ,2 日期检验,3 正则表达式检验</param>
            <param name="regStr">使用正则表达式检验时的正则表达式</param>
            <param name="separate">分隔字符串</param>
            <returns>返回已格式化的Id集合</returns>
        </member>
        <member name="M:App.Often.GetIdsFormat(System.String,System.Byte,System.String,System.String,System.String)">
            <summary>格式化Id集合</summary>
            <param name="inStr">需要效验的Id集合字符串</param>
            <param name="style">类型效验。0 数字检验 ,1 字符串检验 ,2 日期检验,3 正则表达式检验</param>
            <param name="regStr">使用正则表达式检验时的正则表达式</param>
            <param name="separate">分隔字符串</param>
            <param name="backtrack">返回值分隔字符串</param>
            <returns>返回已格式化的Id集合</returns>
        </member>
        <member name="M:App.Often.AutoSizeNarrow(System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>如果输入的宽度或高度大于指定的宽度或高度就等比列缩小宽度或高度</summary>
            <param name="MaxWidth">指定最大宽度限制并返回已等比列缩小的宽度值</param>
            <param name="MaxHeight">指定最大高度限制并返回已等比列缩小的高度值</param>
            <param name="inWidth">输入的宽度</param>
            <param name="inHeight">输入的高度</param>
        </member>
        <member name="M:App.Often.DayToWeek">
            <summary>返回当前日期是星期几(返回中文日期：星期一、星期二、星期三、星期四、星期五、星期六、星期日)</summary> 
            <returns>返回当前日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToWeek(System.String)">
            <summary>根据字符串格式的日期返回该日期是星期几(返回中文日期：星期一、星期二、星期三、星期四、星期五、星期六、星期日)</summary> 
            <param name="de">一个字符串格式的日期</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToWeek(System.DateTime)">
            <summary>根据日期返回该日期是星期几(返回中文日期：星期一、星期二、星期三、星期四、星期五、星期六、星期日)</summary> 
            <param name="de">一个日期</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToWeek(System.DateTime,System.String)">
            <summary>根据日期和参数列出的星期返回该日期是星期几(第二个参数值可以是：1234567，例如：524。返回中文日期：星期一、星期二、星期三、星期四、星期五、星期六、星期日)</summary> 
            <param name="de">一个日期</param>
            <param name="sd">只返回该参数列出的星期，参数值可以是：1234567，例如：524</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToNumWeek">
            <summary>返回当前日期是星期几(返回数字：1、2、3、4、5、6、7)</summary> 
            <returns>返回当前日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToNumWeek(System.String)">
            <summary>根据字符串格式的日期返回该日期是星期几(返回数字：1、2、3、4、5、6、7)</summary> 
            <param name="de">一个字符串格式的日期</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToNumWeek(System.DateTime)">
            <summary>根据日期返回该日期是星期几(返回数字：1、2、3、4、5、6、7)</summary> 
            <param name="de">一个日期</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.DayToNumWeek(System.DateTime,System.String)">
            <summary>根据日期和参数列出的星期返回该日期是星期几(第二个参数值可以是：1234567，例如：524。返回数字：1、2、3、4、5、6、7)</summary> 
            <param name="de">一个日期</param>
            <param name="sd">只返回该参数列出的星期，参数值可以是：1234567，例如：524</param>
            <returns>返回日期是星期几</returns>
        </member>
        <member name="M:App.Often.ChToDTime(System.String,System.Byte)">
            <summary>中文日期转换成标准日期格式。例如 2008年10月1日 6时33分50秒 格式的日期转换成 2008-10-1 6:33:50</summary> 
            <param name="strIn">要转换的字符串</param>
            <param name="mode">
            转换模式
            <para>0、对应 2008年10月1日 格式</para>
            <para>1、对应 2008年10月1日 6时33分 格式</para>
            <para>2、对应 2008年10月1日 6时33分50秒 格式</para>
            <para>3、对应 2008-10-1 格式</para>
            </param>
            <returns>返回已转换好的字符串</returns>
        </member>
        <member name="M:App.Often.StrDup(System.String,System.Int32)">
            <summary>返回由指定字符串重复指定次数后形成的字符串</summary>
            <param name="sInput">需要重复的字符串</param>
            <param name="number">重复次数</param>
            <returns>返回完成重复后的字符串</returns>
        </member>
        <member name="M:App.Often.LStrDup(System.String,System.String,System.Int32)">
            <summary>在字符串左侧并根据字符串位数限制添加重复字符串</summary>
            <param name="strInput">需要添加重复字符的字符串</param>
            <param name="sInput">重复字符串</param>
            <param name="number">字符串位数限制</param>
            <returns>返回已添加重复字符的字符串</returns>
        </member>
        <member name="M:App.Often.RStrDup(System.String,System.String,System.Int32)">
            <summary>在字符串右侧并根据字符串位数限制添加重复字符串</summary>
            <param name="strInput">需要添加重复字符的字符串</param>
            <param name="sInput">重复字符串</param>
            <param name="number">字符串位数限制</param>
            <returns>返回已添加重复字符的字符串</returns>
        </member>
        <member name="M:App.Often.CharDup(System.Char,System.Int32)">
            <summary>返回由指定字符重复指定次数后形成的字符串</summary>
            <param name="CInput">需要重复的字符</param>
            <param name="number">重复次数</param>
            <returns>返回完成重复后的字符串</returns>
        </member>
        <member name="M:App.Often.LCharDup(System.String,System.Char,System.Int32)">
            <summary>在字符串左侧并根据字符串位数限制添加重复字符</summary>
            <param name="strInput">需要添加重复字符的字符串</param>
            <param name="CInput">重复字符</param>
            <param name="number">字符串位数限制</param>
            <returns>返回已添加重复字符的字符串</returns>
        </member>
        <member name="M:App.Often.RCharDup(System.String,System.Char,System.Int32)">
            <summary>在字符串右侧并根据字符串位数限制添加重复字符</summary>
            <param name="strInput">需要添加重复字符的字符串</param>
            <param name="CInput">重复字符</param>
            <param name="number">字符串位数限制</param>
            <returns>返回已添加重复字符的字符串</returns>
        </member>
        <member name="M:App.Often.Trim(System.String)">
            <summary>将指定字符串两端空白删除</summary>
            <param name="strInput">需要删除两端空白的字符串</param>
            <returns>返回已删除空白的字符串</returns>
        </member>
        <member name="M:App.Often.Trim(System.String,System.Byte)">
            <summary>将指定字符串内空白删除</summary>
            <param name="strInput">需要删除空白的字符串</param>
            <param name="mode">删除模式：0 删除字符串两端空白、1 删除字符串左端空白、2 删除字符串右端空白、3 删除字符串内所有空白。</param>
            <returns>返回已删除空白的字符串</returns>
        </member>
        <member name="M:App.Often.RanNum">
            <summary>返回一个随即数。随机数的最小值：1,随机数的最大值：100000000,补位字符串：0,补位数：9</summary>
            <returns>返回一个字符串类型随即数值</returns>
        </member>
        <member name="M:App.Often.RanNum(System.Int32,System.Int32)">
            <summary>返回一个随即数。补位字符串：0,补位数：9</summary>
            <param name="minNum">随机数的最小值</param>
            <param name="maxNum">随机数的最大值</param>
            <returns>返回一个字符串类型随即数值</returns>
        </member>
        <member name="M:App.Often.RanNum(System.Int32,System.Int32,System.String)">
            <summary>返回一个随即数。补位数：9</summary>
            <param name="minNum">随机数的最小值</param>
            <param name="maxNum">随机数的最大值</param>
            <param name="digitStr">补位字符串</param>
            <returns>返回一个字符串类型随即数值</returns>
        </member>
        <member name="M:App.Often.RanNum(System.Int32,System.Int32,System.Int32)">
            <summary>返回一个随即数。补位字符串：0</summary>
            <param name="minNum">随机数的最小值</param>
            <param name="maxNum">随机数的最大值</param>
            <param name="digit">补位数</param>
            <returns>返回一个字符串类型随即数值</returns>
        </member>
        <member name="M:App.Often.RanNum(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>返回一个随即数。</summary>
            <param name="minNum">随机数的最小值</param>
            <param name="maxNum">随机数的最大值</param>
            <param name="digitStr">补位字符串</param>
            <param name="digit">补位数</param>
            <returns>返回一个字符串类型随即数值</returns>
        </member>
        <member name="M:App.Often.RanStr">
            <summary>返回一个32位长度的随即字符串。</summary>
            <returns>返回一个32位长度的随即字符串。</returns>
        </member>
        <member name="M:App.Often.RanStr(System.Int32)">
            <summary>返回一个指定长度的随即字符串。</summary>
            <param name="keyNum">随即字符串生成位数</param>
            <returns>返回一个指定长度的随即字符串。</returns>
        </member>
        <member name="M:App.Often.RanStr(System.Int32,System.String)">
            <summary>返回一个指定长度和指定的随即提取字符串随即字符串。</summary>
            <param name="keyNum">随即字符串生成位数</param>
            <param name="keyStrs">随即字符串提取字符串</param>
            <returns>返回一个指定长度和指定的随即提取字符串随即字符串。</returns>
        </member>
        <member name="M:App.Often.RanStr(System.Int32,System.Int32)">
            <summary>返回一个指定长度及种子的随即字符串。</summary>
            <param name="keyNum">随即字符串生成位数</param>
            <param name="seed">随即种子</param>
            <returns>返回一个指定长度及种子的随即字符串。</returns>
        </member>
        <member name="M:App.Often.RanStr(System.Int32,System.Int32,System.String)">
            <summary>返回一个指定长度及种子并和指定的随即提取字符串随即字符串。</summary>
            <param name="keyNum">随即字符串生成位数</param>
            <param name="seed">随即种子</param>
            <param name="keyStrs">随即字符串提取字符串</param>
            <returns>返回一个指定长度及种子并和指定的随即提取字符串随即字符串。</returns>
        </member>
        <member name="M:App.Often.GetDate">
            <summary>返回指定格式(yyyy-MM-dd HH:mm:ss)的当前系统日期字符串表示</summary>
            <returns>返回已格式的日期字符串表示</returns>
        </member>
        <member name="M:App.Often.GetDate(System.DateTime)">
            <summary>返回指定格式(yyyy-MM-dd HH:mm:ss)的日期字符串表示</summary>
            <param name="dt">需要格式化的日期</param>
            <returns>返回已格式的日期字符串表示</returns>
        </member>
        <member name="M:App.Often.GetDate(System.String)">
            <summary>返回指定格式的当前系统日期字符串表示
            <para>常用格式字符：</para> 
            <para>gg 时期或纪元。如果要设置格式的日期不具有关联的时期或纪元字符串，则忽略该模式。</para>  
            <para>y、%y 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。如果该格式模式没有与其他格式模式组合，则指定“%y”。</para>  
            <para>yy 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示具有前导零的年份。</para>
            <para>yyyy 包括纪元的四位数的年份。</para>
            <para>d、%d 月中的某一天。一位数的日期没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%d”。</para>  
            <para>dd 月中的某一天。一位数的日期有一个前导零。</para>  
            <para>ddd 周中某天的缩写名称。</para>  
            <para>dddd 周中某天的完整名称</para>  
            <para>M、%M 月份数字。一位数的月份没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%M”。</para>  
            <para>MM 月份数字。一位数的月份有一个前导零。</para>  
            <para>MMM 月份的缩写名称。</para>  
            <para>MMMM 月份的完整名称。</para>  
            <para>h、%h 12 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%h”。</para>
            <para>hh 12 小时制的小时。一位数的小时数有前导零。 </para>
            <para>H、%H 24 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%H”。</para>
            <para>HH 24 小时制的小时。一位数的小时数有前导零。</para>
            <para>m、%m 分钟。一位数的分钟数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%m”。</para>
            <para>mm 分钟。一位数的分钟数有一个前导零。</para>
            <para>s、%s 秒。一位数的秒数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%s”。</para>
            <para>ss 秒。一位数的秒数有一个前导零。</para>
            <para>f、%f 秒的小数精度为一位。其余数字被截断。如果该格式模式没有与其他格式模式组合，则指定“%f”。</para>
            <para>ff 秒的小数精度为两位。其余数字被截断。</para>
            <para>fff 秒的小数精度为三位。其余数字被截断。</para>
            <para>F、%F 示秒的小数部分的最高有效数字。如果该数字为零，则不显示任何内容。如果该格式模式没有与其他格式模式组合，则指定“%F”。</para>
            <para>FF 显示秒的小数部分的两个最高有效数字。但是，不显示尾随的零（两个零数字）。</para>
            <para>FFF 显示秒的小数部分的三个最高有效数字。但是，不显示尾随的零（三个零数字）。</para>  
            </summary>
            <param name="format">格式字符串</param>
            <returns>返回已格式的日期字符串表示</returns>
        </member>
        <member name="M:App.Often.GetDate(System.DateTime,System.String)">
            <summary>返回指定格式的日期字符串表示
            <para>常用格式字符：</para> 
            <para>gg 时期或纪元。如果要设置格式的日期不具有关联的时期或纪元字符串，则忽略该模式。</para>  
            <para>y、%y 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。如果该格式模式没有与其他格式模式组合，则指定“%y”。</para>  
            <para>yy 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示具有前导零的年份。</para>
            <para>yyyy 包括纪元的四位数的年份。</para>
            <para>d、%d 月中的某一天。一位数的日期没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%d”。</para>  
            <para>dd 月中的某一天。一位数的日期有一个前导零。</para>  
            <para>ddd 周中某天的缩写名称。</para>  
            <para>dddd 周中某天的完整名称</para>  
            <para>M、%M 月份数字。一位数的月份没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%M”。</para>  
            <para>MM 月份数字。一位数的月份有一个前导零。</para>  
            <para>MMM 月份的缩写名称。</para>  
            <para>MMMM 月份的完整名称。</para>  
            <para>h、%h 12 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%h”。</para>
            <para>hh 12 小时制的小时。一位数的小时数有前导零。 </para>
            <para>H、%H 24 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%H”。</para>
            <para>HH 24 小时制的小时。一位数的小时数有前导零。</para>
            <para>m、%m 分钟。一位数的分钟数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%m”。</para>
            <para>mm 分钟。一位数的分钟数有一个前导零。</para>
            <para>s、%s 秒。一位数的秒数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%s”。</para>
            <para>ss 秒。一位数的秒数有一个前导零。</para>
            <para>f、%f 秒的小数精度为一位。其余数字被截断。如果该格式模式没有与其他格式模式组合，则指定“%f”。</para>
            <para>ff 秒的小数精度为两位。其余数字被截断。</para>
            <para>fff 秒的小数精度为三位。其余数字被截断。</para>
            <para>F、%F 示秒的小数部分的最高有效数字。如果该数字为零，则不显示任何内容。如果该格式模式没有与其他格式模式组合，则指定“%F”。</para>
            <para>FF 显示秒的小数部分的两个最高有效数字。但是，不显示尾随的零（两个零数字）。</para>
            <para>FFF 显示秒的小数部分的三个最高有效数字。但是，不显示尾随的零（三个零数字）。</para>  
            </summary>
            <param name="dt">需要格式化的日期</param>
            <param name="format">格式字符串</param>
            <returns>返回已格式的日期字符串表示</returns>
        </member>
        <member name="M:App.Often.GetDate(System.String,System.String)">
            <summary>返回指定格式的日期字符串表示
            <para>常用格式字符：</para> 
            <para>gg 时期或纪元。如果要设置格式的日期不具有关联的时期或纪元字符串，则忽略该模式。</para>  
            <para>y、%y 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。如果该格式模式没有与其他格式模式组合，则指定“%y”。</para>  
            <para>yy 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示具有前导零的年份。</para>
            <para>yyyy 包括纪元的四位数的年份。</para>
            <para>d、%d 月中的某一天。一位数的日期没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%d”。</para>  
            <para>dd 月中的某一天。一位数的日期有一个前导零。</para>  
            <para>ddd 周中某天的缩写名称。</para>  
            <para>dddd 周中某天的完整名称</para>  
            <para>M、%M 月份数字。一位数的月份没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%M”。</para>  
            <para>MM 月份数字。一位数的月份有一个前导零。</para>  
            <para>MMM 月份的缩写名称。</para>  
            <para>MMMM 月份的完整名称。</para>  
            <para>h、%h 12 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%h”。</para>
            <para>hh 12 小时制的小时。一位数的小时数有前导零。 </para>
            <para>H、%H 24 小时制的小时。一位数的小时数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%H”。</para>
            <para>HH 24 小时制的小时。一位数的小时数有前导零。</para>
            <para>m、%m 分钟。一位数的分钟数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%m”。</para>
            <para>mm 分钟。一位数的分钟数有一个前导零。</para>
            <para>s、%s 秒。一位数的秒数没有前导零。如果该格式模式没有与其他格式模式组合，则指定“%s”。</para>
            <para>ss 秒。一位数的秒数有一个前导零。</para>
            <para>f、%f 秒的小数精度为一位。其余数字被截断。如果该格式模式没有与其他格式模式组合，则指定“%f”。</para>
            <para>ff 秒的小数精度为两位。其余数字被截断。</para>
            <para>fff 秒的小数精度为三位。其余数字被截断。</para>
            <para>F、%F 示秒的小数部分的最高有效数字。如果该数字为零，则不显示任何内容。如果该格式模式没有与其他格式模式组合，则指定“%F”。</para>
            <para>FF 显示秒的小数部分的两个最高有效数字。但是，不显示尾随的零（两个零数字）。</para>
            <para>FFF 显示秒的小数部分的三个最高有效数字。但是，不显示尾随的零（三个零数字）。</para>  
            </summary>
            <param name="dts">需要格式化的日期字符串</param>
            <param name="format">格式字符串</param>
            <returns>返回已格式的日期字符串表示</returns>
        </member>
        <member name="M:App.Often.ReFDateTime(System.String)">
            <summary>使用替换关键字对当前时间重组并将时间格式化为等长字符串(例如：2008-1-1 格式化后：2008-01-01)。
            <para>格式化为等长字符串的替换关键字：</para> 
            <para>{$Year} 年</para>  
            <para>{$Month} 月</para>  
            <para>{$Day} 日</para>  
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para>  
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para> 
            <para>直接替换关键字：</para> 
            <para>{$year} 年</para>  
            <para>{$month} 月</para>  
            <para>{$day} 日</para>  
            <para>{$hour} 时</para>  
            <para>{$minute} 分</para>  
            <para>{$second} 秒</para>  
            <para>{$millisecond} 毫秒</para>  
            <para>{$random} 10000000至100000000之间随即数</para> 
            </summary>
            <param name="strInput">重组替换字符串</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.ReFDateTime(System.String,System.String)">
            <summary>使用替换关键字对当前时间重组并将时间格式化为等长字符串(例如：2008-1-1 格式化后：2008-01-01)。
            <para>格式化为等长字符串的替换关键字：</para> 
            <para>{$Year} 年</para>  
            <para>{$Month} 月</para>  
            <para>{$Day} 日</para>  
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para>  
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para> 
            <para>直接替换关键字：</para> 
            <para>{$year} 年</para>  
            <para>{$month} 月</para>  
            <para>{$day} 日</para>  
            <para>{$hour} 时</para>  
            <para>{$minute} 分</para>  
            <para>{$second} 秒</para>  
            <para>{$millisecond} 毫秒</para>  
            <para>{$random} 10000000至100000000之间随即数</para> 
            </summary>
            <param name="strInput">重组替换字符串</param>
            <param name="sdate">一个字符串时间</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.ReFDateTime(System.String,System.DateTime)">
            <summary>使用替换关键字对时间重组并将时间格式化为等长字符串(例如：2008-1-1 格式化后：2008-01-01)。
            <para>格式化为等长字符串的替换关键字：</para> 
            <para>{$Year} 年</para>  
            <para>{$Month} 月</para>  
            <para>{$Day} 日</para>  
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para>  
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para> 
            <para>直接替换关键字：</para> 
            <para>{$year} 年</para>  
            <para>{$month} 月</para>  
            <para>{$day} 日</para>  
            <para>{$hour} 时</para>  
            <para>{$minute} 分</para>  
            <para>{$second} 秒</para>  
            <para>{$millisecond} 毫秒</para>  
            <para>{$random} 10000000至100000000之间随即数</para> 
            </summary>
            <param name="strInput">重组替换字符串</param>
            <param name="date">时间</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.ReDateTime(System.String)">
            <summary>使用替换关键字对时间重组。
            <para>替换关键字：</para>
            <para>{$Year} 年</para>
            <para>{$Month} 月</para>
            <para>{$Day} 日</para>
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para> 
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para>
            </summary>
            <param name="strInput">重组替换字符串</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.ReDateTime(System.String,System.String)">
            <summary>使用替换关键字对时间重组。
            <para>替换关键字：</para>
            <para>{$Year} 年</para>
            <para>{$Month} 月</para>
            <para>{$Day} 日</para>
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para> 
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para>
            </summary>
            <param name="strInput">重组替换字符串</param>
            <param name="sdate">一个字符串时间</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.ReDateTime(System.String,System.DateTime)">
            <summary>使用替换关键字对时间重组。
            <para>替换关键字：</para>
            <para>{$Year} 年</para>
            <para>{$Month} 月</para>
            <para>{$Day} 日</para>
            <para>{$Hour} 时</para>  
            <para>{$Minute} 分</para> 
            <para>{$Second} 秒</para>  
            <para>{$Millisecond} 毫秒</para>  
            <para>{$Random} 10000000至100000000之间随即数</para>
            </summary>
            <param name="strInput">重组替换字符串</param>
            <param name="date">时间</param>
            <returns>返回已重组的字符串</returns>
        </member>
        <member name="M:App.Often.GetRanChr">
            <summary>返回一个由时间+随即数组成的随即字符串</summary>
            <returns>返回一个由时间+随即数组成的随即字符串</returns>
        </member>
        <member name="M:App.Often.LenStr(System.String)">
            <summary> 获取字符串长度(按单字节模式计算长度)</summary>
            <param name="strInput">要获取长度的字符串</param>
            <returns>返回长度值</returns>
        </member>
        <member name="M:App.Often.MidStr(System.String,System.Int32)">
            <summary>输入字符串超过指定长度则截取字符串(按单字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.MidStrAb(System.String,System.Int32)">
            <summary>输入字符串超过指定长度则截取字符串并添加默认省略符(按单字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.MidStrAb(System.String,System.Int32,System.String)">
            <summary>输入字符串超过指定长度则截取字符串并添加省略符(按单字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <param name="abridge">省略字符串</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.MidLStr(System.String,System.Int32)">
            <summary>输入字符串超过指定长度则截取字符串(按双字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.MidLStrAb(System.String,System.Int32)">
            <summary>输入字符串超过指定长度则截取字符串并添加默认省略符(按双字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.MidLStrAb(System.String,System.Int32,System.String)">
            <summary>输入字符串超过指定长度则截取字符串并添加省略符(按双字节模式计算长度)</summary>
            <param name="strInput">要截取的字符串</param>
            <param name="intLen">截取长度</param>
            <param name="abridge">省略字符串</param>
            <returns>返回已被截取后的字符串</returns>
        </member>
        <member name="M:App.Often.GetParm(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>获取可省略参数数组</summary>
            <param name="parm">可省略参数数组</param>
            <param name="abridge">默认参数数组</param>
            <returns>返回已更新默认值的参数数组</returns>
        </member>
        <member name="M:App.Often.TypeParm(System.Collections.Generic.List{System.Char},System.Collections.Generic.List{System.Char})">
            <summary>获取可省略参数char数组</summary>
            <param name="parm">可省略char参数数组</param>
            <param name="abridge">默认char参数数组</param>
            <returns>返回已更新默认值的参数char数组</returns>
        </member>
        <member name="M:App.Often.TypeParm(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>获取可省略参数string数组</summary>
            <param name="parm">可省略string参数数组</param>
            <param name="abridge">默认string参数数组</param>
            <returns>返回已更新默认值的参数string数组</returns>
        </member>
        <member name="M:App.Often.TypeParm(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte})">
            <summary>获取可省略参数byte数组</summary>
            <param name="parm">可省略byte参数数组</param>
            <param name="abridge">默认byte参数数组</param>
            <returns>返回已更新默认值的参数byte数组</returns>
        </member>
        <member name="M:App.Often.TypeParm(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>获取可省略参数int数组</summary>
            <param name="parm">可省略int参数数组</param>
            <param name="abridge">默认int参数数组</param>
            <returns>返回已更新默认值的参数int数组</returns>
        </member>
        <member name="M:App.Often.TypeParm(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>获取可省略参数long数组</summary>
            <param name="parm">可省略long参数数组</param>
            <param name="abridge">默认long参数数组</param>
            <returns>返回已更新默认值的参数long数组</returns>
        </member>
        <member name="M:App.Often.GetAbsPath(System.String,System.String,System.String)">
            <summary>返回当前应用程序相对根目录的绝对路径  例子：GetAbsPath(Server.MapPath("../about.aspx"), "/", Server.MapPath("/"));</summary>
            <param name="mPath">当前应用程序物理路径</param>
            <param name="topPath">应用程序的虚拟应用程序根路径</param>
            <param name="topDrivePath">应用程序的虚拟应用程序根物理路径</param>
            <returns>返回当前应用程序相对根目录的绝对路径</returns>
        </member>
        <member name="M:App.Often.OutText(System.String)">
            <summary>清除html格式输出文本</summary>
            <param name="strInput">要清除的html字符串</param>
            <returns>返回已被清除html的字符串</returns>
        </member>
        <member name="M:App.Often.OutTxt(System.String)">
            <summary>清除html格式输出纯文本</summary>
            <param name="strInput">要清除的html字符串</param>
            <returns>返回已被清除html的字符串</returns>
        </member>
        <member name="M:App.Often.RegReplace(System.String@,System.String,System.String)">
            <summary>根据首字符串与尾字符串循环清除首与尾之间字符串</summary>
            <param name="strInput">要清除的html字符串</param>
            <param name="Rea">首字符串</param>
            <param name="Reb">尾字符串</param>
            <returns></returns>
        </member>
        <member name="M:App.Often.FormatUrl(System.String,System.String)">
            <summary>将WebUrl相对地址换成绝对地址</summary>
            <param name="BaseUrl">基Url地址</param>
            <param name="theUrl">相对Url地址</param>
            <returns>返回绝对地址</returns>
        </member>
        <member name="M:App.Often.GetSqlName(System.String,System.String)">
            <summary>检查输入的数据库列名并返回合法的数据库列名(默认输出的列名为合法数据库列名的第一个)</summary>
            <param name="sqlName">需要检查的数据库列名</param>
            <param name="sqlNames">合法的数据库列名，多个列名使用,分隔。例如：Name,Email</param>
            <returns>返回合法的数据库列名</returns>
        </member>
        <member name="M:App.Often.GetSqlName(System.String,System.String,System.String)">
            <summary>检查输入的数据库列名并返回合法的数据库列名</summary>
            <param name="sqlName">需要检查的数据库列名</param>
            <param name="sqlNames">合法的数据库列名，多个列名使用,分隔。例如：Name,Email</param>
            <param name="defName">默认输出的列名</param>
            <returns>返回合法的数据库列名</returns>
        </member>
        <member name="M:App.Often.GetSqlName(System.String,System.String,System.String,System.String)">
            <summary>检查输入的数据库列名并返回合法的数据库列名</summary>
            <param name="sqlName">需要检查的数据库列名</param>
            <param name="sqlNames">合法的数据库列名，多个列名使用part指定的分隔符分隔。例如：Name,Email</param>
            <param name="defName">默认输出的列名</param>
            <param name="part">分隔符</param>
            <returns>返回合法的数据库列名</returns>
        </member>
        <member name="M:App.Often.IsVer(System.Object,System.Int32)">
            <summary>对象效验,效验成功返回true 否则返回false
            <para>mode：</para>
            <para>0  IsInt32</para>
            <para>1  IsDate</para>
            <para>2  IsNum</para>
            <para>3  IsInt64</para>
            <para>4  IsInt16</para>
            <para>5  IsByte</para>
            <para>6  IsSByte</para>
            <para>7  IsUrl</para>
            <para>8  IsUInt64</para>
            <para>9  IsUInt32</para>
            <para>10 IsUInt16</para>
            </summary>
            <param name="inStr">需要效验的对象</param>
            <param name="mode">效验模式</param>
            <returns>对象效验,效验成功返回true 否则返回false</returns>
        </member>
        <member name="M:App.Often.IsVer(System.String,System.Int32)">
            <summary>字符串效验,效验成功返回true 否则返回false
            <para>mode：</para>
            <para>0  IsInt32</para>
            <para>1  IsDate</para>
            <para>2  IsNum</para>
            <para>3  IsInt64</para>
            <para>4  IsInt16</para>
            <para>5  IsByte</para>
            <para>6  IsSByte</para>
            <para>7  IsUrl</para>
            <para>8  IsUInt64</para>
            <para>9  IsUInt32</para>
            <para>10 IsUInt16</para>
            </summary>
            <param name="inStr">需要效验的字符串</param>
            <param name="mode">效验模式</param>
            <returns>字符串效验,效验成功返回true 否则返回false</returns>
        </member>
        <member name="M:App.Often.StrIsReg(System.String,System.String)">
            <summary>正则表达式验证输入字符串，匹配返回 true 不匹配 返回 false</summary>
            <param name="strIn">要验证的字符串</param>
            <param name="regStr">正则表达式</param>
            <returns>返回true | false</returns>
        </member>
        <member name="M:App.Often.StrVer(System.String)">
            <summary>字符串是否为空白检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.StrVer(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>字符串长度检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="minLeng">最小长度限制检验。该值等于-1不效验</param>
            <param name="maxLeng">最大长度限制检验。该值等于-1不效验</param>
            <param name="isSingle">单字节/双字节模式。  True 单字节长度检验 | False 双字节长度检验</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.StrVer(System.String,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>字符串检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="isEmpty">是否为空白字符串检验。 true 检验 | false 不检验</param>
            <param name="minLeng">最小长度限制检验。该值等于-1不效验</param>
            <param name="maxLeng">最大长度限制检验。该值等于-1不效验</param>
            <param name="isSingle">单字节/双字节模式。  True 单字节长度检验 | False 双字节长度检验</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.StrVer(System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.String@)">
            <summary>字符串检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="isEmpty">是否为空白字符串检验。 true 检验 | false 不检验</param>
            <param name="minLeng">最小长度限制检验。该值等于-1不效验</param>
            <param name="maxLeng">最大长度限制检验。该值等于-1不效验</param>
            <param name="isSingle">单字节/双字节模式。  True 单字节长度检验 | False 双字节长度检验</param>
            <param name="outErrStr">检验失败输出的错误信息，没有发生错误则输出空字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.NumVer(System.String,System.Boolean,System.Double,System.Double)">
            <summary>数字检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="isEmpty">是否为空字符串检验。 true 检验 | false 不检验</param>
            <param name="minNum">最小值限制检验。</param>
            <param name="maxNum">最大值限制检验。</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.NumVer(System.String,System.Boolean,System.Double,System.Double,System.String@)">
            <summary>数字检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="isEmpty">是否为空字符串检验。 true 检验 | false 不检验</param>
            <param name="minNum">最小值限制检验。</param>
            <param name="maxNum">最大值限制检验。</param>
            <param name="outErrStr">检验失败输出的错误信息，没有发生错误则输出空字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.DateVer(System.String,System.Boolean,System.DateTime,System.DateTime,System.String@)">
            <summary>日期检验，成功返回 true 失败返回 false</summary>
            <param name="inStr">需要检验的字符串</param>
            <param name="isEmpty">是否为空字符串检验。 true 检验 | false 不检验</param>
            <param name="minDate">日期最小值限制检验</param>
            <param name="maxDate">日期最大值限制检验</param>
            <param name="outErrStr">检验失败输出的错误信息，没有发生错误则输出空字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsDate(System.String)">
            <summary>检验是否是日期格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsNum(System.String)">
            <summary>检验是否是数字格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt64(System.String)">
            <summary>检验是否是UInt64无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt32(System.String)">
            <summary>检验是否是UInt32无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt16(System.String)">
            <summary>检验是否是UInt16无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsByte(System.String)">
            <summary>检验是否是Byte无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt64(System.String)">
            <summary>检验是否是Int64有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt32(System.String)">
            <summary>检验是否是Int32有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt16(System.String)">
            <summary>检验是否是Int16有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsSByte(System.String)">
            <summary>检验是否是SByte有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUrl(System.String)">
            <summary>检验是否Url，成功返回 true 失败返回 false</summary>
            <param name="urls">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsDate(System.Object)">
            <summary>检验是否是日期格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsNum(System.Object)">
            <summary>检验是否是数字格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt64(System.Object)">
            <summary>检验是否是UInt64无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt32(System.Object)">
            <summary>检验是否是UInt32无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUInt16(System.Object)">
            <summary>检验是否是UInt16无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsByte(System.Object)">
            <summary>检验是否是Byte无符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt64(System.Object)">
            <summary>检验是否是Int64有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt32(System.Object)">
            <summary>检验是否是Int32有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsInt16(System.Object)">
            <summary>检验是否是Int16有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsSByte(System.Object)">
            <summary>检验是否是SByte有符号整数格式，成功返回 true 失败返回 false</summary>
            <param name="inStr">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUrl(System.Object)">
            <summary>检验是否Url，成功返回 true 失败返回 false</summary>
            <param name="urls">要检验的字符串</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.Often.IsUpper(System.String)">
            <summary>字母是否大写判断</summary>
            <param name="inStr">需要判断的字母</param>
            <returns>如果是大写返回true 如果是小写就返回false</returns>
        </member>
        <member name="M:App.Often.IsExt(System.String,System.String)">
            <summary>判断路径文件名后缀是否在指定的后缀，如果存在返回true，否则返回false</summary>
            <param name="path">文件路径</param>
            <param name="opt">验证所需后缀字符串组，多个后缀使用|分隔。 例如： jpg|jpeg|bmp</param>
            <returns>如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:App.Often.IsUrlExt(System.String,System.String)">
            <summary>判断Url文件名后缀是否在指定的后缀，如果存在返回1，不存在返回0，无文件名则返回2</summary>
            <param name="urls">Url地址</param>
            <param name="opt">验证所需后缀字符串组，多个后缀使用|分隔。 例如： jpg|jpeg|bmp</param>
            <returns>如果存在返回1，不存在返回0，无文件名则返回2</returns>
        </member>
        <member name="M:App.Often.IsUrlExt(System.Uri,System.String)">
            <summary>判断Uri对象文件名后缀是否在指定的后缀，如果存在返回1，不存在返回0，无文件名则返回2</summary>
            <param name="urli">Uri对象</param>
            <param name="opt">验证所需后缀字符串组，多个后缀使用|分隔。 例如： jpg|jpeg|bmp</param>
            <returns>如果存在返回1，不存在返回0，无文件名则返回2</returns>
        </member>
        <member name="M:App.Often.IsUrlCompare(System.String,System.String)">
            <summary>判断一个url是否和另一个url的域相同，如果相同返回true，不相同返回false</summary>
            <param name="urla">第一个Url地址</param>
            <param name="urlb">第二个Url地址</param>
            <returns>如果相同返回true，不相同返回false</returns>
        </member>
        <member name="M:App.Often.IsUrlCompare(System.Uri,System.Uri)">
            <summary>判断一个Uri对象是否和另一个Uri对象的域相同，如果相同返回true，不相同返回false</summary>
            <param name="urlia">第一个Uri对象</param>
            <param name="urlib">第二个Uri对象</param>
            <returns>如果相同返回true，不相同返回false</returns>
        </member>
        <member name="M:App.Often.StrToName(System.String)">
            <summary>由String返回NameValueCollection,参数组之间分隔符：&amp; ，参数名与参数值之间分隔符：= ，使用Unescape解码。</summary>
            <param name="InStr">一个字符串</param>
            <returns>返回一个NameValueCollection。</returns>
        </member>
        <member name="M:App.Often.StrToName(System.String,System.Byte)">
            <summary>由String返回NameValueCollection,参数组之间分隔符：&amp; ，参数名与参数值之间分隔符：= 。</summary>
            <param name="InStr">一个字符串</param>
            <param name="mode">指定是否使用Unescape解码， 0 使用 1 不使用</param>
            <returns>返回一个NameValueCollection。</returns>
        </member>
        <member name="M:App.Often.StrToName(System.String,System.Char,System.Char)">
            <summary>由String返回NameValueCollection,使用Unescape解码。</summary>
            <param name="InStr">一个字符串</param>
            <param name="groupCompart">参数组之间分隔字符</param>
            <param name="compart">参数名与参数值之间分隔字符</param>
            <returns>返回一个NameValueCollection。</returns>
        </member>
        <member name="M:App.Often.StrToName(System.String,System.Char,System.Char,System.Byte)">
            <summary>由String返回NameValueCollection</summary>
            <param name="InStr">一个字符串</param>
            <param name="groupCompart">参数组之间分隔字符</param>
            <param name="compart">参数名与参数值之间分隔字符</param>
            <param name="mode">指定是否使用Unescape解码， 0 使用 1 不使用</param>
            <returns>返回一个NameValueCollection。</returns>
        </member>
        <member name="M:App.Often.NameToStr(System.Collections.Specialized.NameValueCollection)">
            <summary>由NameValueCollection返回序列化String,参数组之间分隔符：&amp; ，参数名与参数值之间分隔符：= ，使用Escape编码。</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <returns>返回已序列化的字符串</returns>
        </member>
        <member name="M:App.Often.NameToStr(System.Collections.Specialized.NameValueCollection,System.Byte)">
            <summary>由NameValueCollection返回序列化String,参数组之间分隔符：&amp; ，参数名与参数值之间分隔符：= 。</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="mode">指定是否使用Escape编码， 0 使用 1 不使用</param>
            <returns>返回已序列化的字符串</returns>
        </member>
        <member name="M:App.Often.NameToStr(System.Collections.Specialized.NameValueCollection,System.Char,System.Char)">
            <summary>由NameValueCollection返回序列化String，使用Escape编码。</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="groupCompart">参数组之间分隔字符</param>
            <param name="compart">参数名与参数值之间分隔字符</param>
            <returns>返回已序列化的字符串</returns>
        </member>
        <member name="M:App.Often.NameToStr(System.Collections.Specialized.NameValueCollection,System.Char,System.Char,System.Byte)">
            <summary>由NameValueCollection返回序列化String</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="groupCompart">参数组之间分隔字符</param>
            <param name="compart">参数名与参数值之间分隔字符</param>
            <param name="mode">指定是否使用Escape编码， 0 使用 1 不使用</param>
            <returns>返回已序列化的字符串</returns>
        </member>
        <member name="M:App.Often.GetName(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>由NameValueCollection返回指定键的一个值</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="item">键的名称</param>
            <returns>返回指定键的第一个值</returns>
        </member>
        <member name="M:App.Often.GetName(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>由NameValueCollection返回指定键的一个值</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="item">键的名称</param>
            <param name="num">指定键的指定索引</param>
            <returns>返回指定键的指定索引值</returns>
        </member>
        <member name="M:App.Often.GetName(System.Collections.Specialized.NameValueCollection,System.Int32,System.Int32)">
            <summary>由NameValueCollection返回指定索引键的一个值</summary>
            <param name="InName">一个NameValueCollection对象</param>
            <param name="item">键的索引</param>
            <param name="num">指定索引键的指定索引</param>
            <returns>返回指定索引键的指定索引值</returns>
        </member>
        <member name="F:App.Often.RegExpStr_Email">
            <summary>电子邮件校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Url">
            <summary>网址校验校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Zip">
            <summary>邮编校验校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Ssn">
            <summary>身份证校验校验</summary> 
        </member>
        <member name="F:App.Often.RegExpStr_IDCard15">
            <summary>严格15位身份证校验校验(15位)</summary> 
        </member>
        <member name="F:App.Often.RegExpStr_IDCard18">
            <summary>严格18位身份证校验校验(18位)</summary> 
        </member>
        <member name="F:App.Often.RegExpStr_Ip">
            <summary>IP校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Date">
            <summary>日期校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_ReUrl">
            <summary>url校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Color">
            <summary>颜色值十六进格式制校验 校验格式： #ff56ee</summary>
        </member>
        <member name="F:App.Often.RegExpStr_ColorTen">
            <summary>颜色值十进制格式校验 校验格式： 128,233,144</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Int">
            <summary>整数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Demical">
            <summary>数字校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_NotMinus">
            <summary>非负整数（正整数 + 0）校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Plus">
            <summary>正整数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_NotPlus">
            <summary>非正整数（负整数 + 0）校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Minus">
            <summary>负整数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_NotMinusFr">
            <summary>非负浮点数（正浮点数 + 0）校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_PlusFr">
            <summary>正浮点数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_NotPlusFr">
            <summary>非正浮点数（负浮点数 + 0）校验</summary> 
        </member>
        <member name="F:App.Often.RegExpStr_MinusFr">
            <summary>负浮点数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Fraction">
            <summary>浮点数校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_26Letter">
            <summary>由26个英文字母组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_26UpperLetter">
            <summary>由26个英文字母的大写组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_26LowerLetter">
            <summary>由26个英文字母的小写组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Num26Letter">
            <summary>由数字和26个英文大小写字母组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Num26LetterAnd">
            <summary>由数字和26个英文大小写字母和“-”组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Num26LeAndCn">
            <summary>由数字、26个英文大小写字母或者中文组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_Num26LeAndCna">
            <summary>由数字、下划线、26个英文大小写字母或者中文组成的字符串校验</summary>
        </member>
        <member name="F:App.Often.RegExpStr_SNum26LeLine">
            <summary>由数字、26个英文字母或者下划线组成的字符串校验</summary>
        </member>
        <member name="M:App.Often.GetTxt(System.String)">
            <summary>返回指定字符串的255字符集之外的html编码</summary> 
            <param name="strIn">要编码的字符串</param>
            <returns>返回指定字符串的255字符集之外的html编码</returns>
        </member>
        <member name="M:App.Often.GetHtml(System.String)">
            <summary>返回指定字符串的完全html编码</summary> 
            <param name="strIn">要编码的字符串</param>
            <returns>返回指定字符串的完全html编码</returns>
        </member>
        <member name="M:App.Often.GetHtmlDecode(System.String)">
            <summary>返回指定字符串的html全解码</summary> 
            <param name="strIn">要解码的字符串</param>
            <returns>返回指定字符串的html全解码</returns>
        </member>
        <member name="M:App.Often.CodeHtml(System.String)">
            <summary>简单html编码</summary> 
            <param name="strIn">要编码的字符串</param>
            <returns>返回已编码的字符串</returns>
        </member>
        <member name="M:App.Often.EasyHtmlEncode(System.String)">
            <summary>Html编码</summary> 
            <param name="strIn">要编码的字符串</param>
            <returns>返回已编码的字符串</returns>
        </member>
        <member name="M:App.Often.CodeHtml(System.String,System.Byte)">
            <summary>Html编码</summary> 
            <param name="strIn">要编码的字符串</param>
            <param name="mode">编码模式：0 不编码、1 简单html编码、2 全部编码、3 只编255之外、4 简单html解码、5 html全解码、其它数值 不编码。</param>
            <returns>返回已编码的字符串</returns>
        </member>
        <member name="M:App.Often.TxtToHtml(System.String)">
            <summary>将文本中回车、换行、空格、左尖括号、右尖括号、转换成对应Html代码</summary> 
            <param name="strIn">要转换的字符串</param>
            <returns>返回已转换的字符串</returns>
        </member>
        <member name="M:App.Often.EnUnicode(System.String,System.String[])">
            <summary>将字符串内容转换为16进制Unicode数据编码。</summary>
            <param name="strEncode">需要转换的字符串</param>
            <param name="parm">
            可省略参数列表：
            <para>1、string类型,前缀(默认值：\u)。 </para> 
            </param>
            <returns>返回已转换后的字符串</returns>
        </member>
        <member name="M:App.Often.DeUnicode(System.String,System.String[])">
            <summary>将16进制Unicode数据编码转换为字符串。</summary>
            <param name="strDecode">需要转换的字符串</param>
            <param name="parm">
            可省略参数列表：
            <para>1、string类型,前缀(默认值：\u)。</para>  
            </param>
            <returns>返回已转换后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlEn(System.String)">
            <summary>将Url中char编码值超过255的字符进行url编码</summary>
            <param name="sUrl">要编码的Url字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlEn(System.String,System.Text.Encoding)">
            <summary>使用指定的编码对象对将Url中char编码值超过255的字符进行url编码</summary>
            <param name="sUrl">要编码的Url字符串</param>
            <param name="encode">指定编码方法的 Encoding</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlEns(System.String)">
            <summary>将Url字符串编码</summary>
            <param name="sUrl">要编码的Url字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlEns(System.String,System.Text.Encoding)">
            <summary>使用指定的编码对象对将Url字符串编码</summary>
            <param name="sUrl">要编码的Url字符串</param>
            <param name="encode">指定编码方法的 Encoding</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlDes(System.String)">
            <summary>将Url字符串解码</summary>
            <param name="sUrl">要解码的Url字符串</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.UrlDes(System.String,System.Text.Encoding)">
            <summary>使用指定的解码对象对将Url字符串解码</summary>
            <param name="sUrl">要解码的Url字符串</param>
            <param name="encode">指定解码方法的 Encoding</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.Escape(System.String)">
            <summary>Escape编码，实现JavaScript的escape编码方法。</summary>
            <param name="s">要编码的字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.Unescape(System.String)">
            <summary>Unescape解码，实现JavaScript的unescape解码方法</summary>
            <param name="s">要解码的字符串</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.EnURI(System.String)">
            <summary>EnURI编码，实现JavaScript的encodeURIComponent编码方法。</summary>
            <param name="s">要编码的字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.DeURI(System.String)">
            <summary>DeURI解码，实现JavaScript的decodeURIComponent解码方法</summary>
            <param name="s">要解码的字符串</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.EncodeURI(System.String)">
            <summary>EncodeURIComponent编码，实现JavaScript的encodeURIComponent编码方法。</summary>
            <param name="s">要编码的字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.DecodeURI(System.String)">
            <summary>DecodeURIComponent解码，实现JavaScript的decodeURIComponent解码方法</summary>
            <param name="s">要解码的字符串</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.HtmlDecode(System.String)">
            <summary>Html解码</summary>
            <param name="strInput">要解码的字符串</param>
            <returns>返回已被解码后的字符串</returns>
        </member>
        <member name="M:App.Often.HtmlEncode(System.String)">
            <summary>Html编码</summary>
            <param name="strInput">要编码的字符串</param>
            <returns>返回已被编码后的字符串</returns>
        </member>
        <member name="M:App.Often.ByteToHex(System.Byte[])">
            <summary>将Byte数组转换成16进制字符串</summary>
            <param name="byteArray">Byte数组</param>
            <returns>返回16进制字符串</returns>
        </member>
        <member name="M:App.Often.HexToByte(System.String)">
            <summary>将16进制字符串转换成Byte数组</summary>
            <param name="hexString">16进制字符串</param>
            <returns>返回Byte数组</returns>
        </member>
        <member name="M:App.Often.GetNumNarrow(System.String)">
            <summary>将输入字符串中的全角数字转换成半角数字并返回</summary>
            <param name="inStr">输入字符串</param>
            <returns>将输入字符串中的全角数字转换成半角数字并返回</returns>
        </member>
        <member name="M:App.Often.GetStrNarrow(System.String)">
            <summary>将输入字符串中的全角数字及英文转换成半角数字及英文并返回</summary>
            <param name="inStr">输入字符串</param>
            <returns>将输入字符串中的全角数字及英文转换成半角数字及英文并返回</returns>
        </member>
        <member name="M:App.Often.DataConversion">
            <summary>数值转换操作方法列表：
            <para>1、十进制转二进制：    Convert.ToString(69, 2);</para>  
            <para>2、十进制转八进制：    Convert.ToString(69, 8);</para> 
            <para>3、十进制转十六进制：  Convert.ToString(69, 16);</para> 
            <para>4、二进制转十进制：    Convert.ToInt32("100111101″, 2);</para>
            <para>5、八进制转十进制：    Convert.ToInt32("76″, 8);</para>
            <para>6、十六进制转十进制：  Convert.ToInt32("FF", 16);</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.Often.GetNumCHN(System.Decimal)">
            <summary>人民币小写转大写</summary>
            <param name="num">人民币数字</param>
            <returns>返回人民币的大写</returns>
        </member>
        <member name="M:App.Often.BoolToByte(System.Boolean)">
            <summary>将bool转换为byte,true返回1，false返回0</summary>
            <param name="Input">要转换的bool值</param>
            <returns>返回已被转换为byte值</returns>
        </member>
        <member name="M:App.Often.DecToIp(System.Int64)">
            <summary>64位整数转换为ip地址</summary>
            <param name="Input">要转换的整数</param>
            <returns>返回已被转换的ip字符串</returns>
        </member>
        <member name="M:App.Often.IpToDec(System.String)">
            <summary>ip地址转换为64位整数</summary>
            <param name="Input">要转换的ip地址</param>
            <returns>返回已被转换的64位整数</returns>
        </member>
        <member name="M:App.Often.GetPcSize(System.String)">
            <summary>计算机存储容量单位转换。例如 ： 10000转换结果为9.77KB</summary>
            <param name="numStr">需要转换的基数字类型字符串(单位：字节)</param>
            <returns>返回已转换后的字符串</returns>
        </member>
        <member name="P:App.Often.Seed">
            <summary>设置或获取随即种子，每获取一次，随即种子自动加1(默认值：-99999999)</summary>
        </member>
        <member name="T:App.TripleDesInfo">
            <summary>TripleDES(三层DES加密)算法加密类</summary> 
        </member>
        <member name="T:App.IDesEncrypt">
            <summary>DES加密算法接口</summary> 
        </member>
        <member name="M:App.IDesEncrypt.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.IDesEncrypt.DesEn(System.String)">
            <summary>加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesEn(System.String,System.String)">
            <summary>加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesEn(System.String,System.String,System.String)">
            <summary>加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesEn(System.String,System.Byte[],System.Byte[])">
            <summary>加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesDe(System.String)">
            <summary>解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesDe(System.String,System.String)">
            <summary>解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesDe(System.String,System.String,System.String)">
            <summary>解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DesDe(System.String,System.Byte[],System.Byte[])">
            <summary>解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.EnDes(System.String)">
            <summary>加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.EnDes(System.String,System.String)">
            <summary>加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.EnDes(System.String,System.String,System.String)">
            <summary>加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.EnDes(System.String,System.Byte[],System.Byte[])">
            <summary>加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DeDes(System.String)">
            <summary>解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DeDes(System.String,System.String)">
            <summary>解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DeDes(System.String,System.String,System.String)">
            <summary>解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.DeDes(System.String,System.Byte[],System.Byte[])">
            <summary>解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesEn(System.String,System.String)">
            <summary>加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesEn(System.String,System.String,System.String)">
            <summary>加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesEn(System.String,System.String,System.String,System.String)">
            <summary>加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesEn(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesDe(System.String,System.String)">
            <summary>解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesDe(System.String,System.String,System.String)">
            <summary>解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesDe(System.String,System.String,System.String,System.String)">
            <summary>解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.IDesEncrypt.FileDesDe(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="P:App.IDesEncrypt.Key">
            <summary>设置或获取加密或解密密匙</summary>
        </member>
        <member name="P:App.IDesEncrypt.KeyIv">
            <summary>设置或获取加密或解密初始向量</summary>
        </member>
        <member name="P:App.IDesEncrypt.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="P:App.IDesEncrypt.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="F:App.TripleDesInfo._DES">
            <summary>设置或获取DES算法加密对象</summary>
        </member>
        <member name="F:App.TripleDesInfo._Key">
            <summary>设置或获取加密或解密密匙16进制字符串(默认值：TripleDes.DesKey)</summary> 
        </member>
        <member name="F:App.TripleDesInfo._KeyIv">
            <summary>设置或获取加密或解密初始向量16进制字符串(默认值：TripleDes.DesKeyIv)</summary> 
        </member>
        <member name="F:App.TripleDesInfo._ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.TripleDesInfo._ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.TripleDesInfo.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.TripleDesInfo.DesEn(System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesEn(System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesEn(System.String,System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesEn(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesDe(System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesDe(System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesDe(System.String,System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DesDe(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.EnDes(System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.EnDes(System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.EnDes(System.String,System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.EnDes(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DeDes(System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DeDes(System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DeDes(System.String,System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.DeDes(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesEn(System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesEn(System.String,System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesEn(System.String,System.String,System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesEn(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesDe(System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesDe(System.String,System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesDe(System.String,System.String,System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDesInfo.FileDesDe(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="P:App.TripleDesInfo.DES">
            <summary>设置或获取DES算法加密对象</summary>
        </member>
        <member name="P:App.TripleDesInfo.Key">
            <summary>设置或获取加密或解密密匙16进制字符串(默认值：TripleDes.DesKey)</summary> 
        </member>
        <member name="P:App.TripleDesInfo.KeyIv">
            <summary>设置或获取加密或解密初始向量16进制字符串(默认值：TripleDes.DesKeyIv)</summary> 
        </member>
        <member name="P:App.TripleDesInfo.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="P:App.TripleDesInfo.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="T:App.Serial">
            <summary>对象序列化静态操作类</summary>
        </member>
        <member name="M:App.Serial.Serialiaze(System.Object)">
            <summary>将对象序列化成xml字符串</summary>
            <param name="obj">一个对象</param>
            <returns>序列化后的字符串</returns>
        </member>
        <member name="M:App.Serial.Deserialize(System.String,System.Type)">
            <summary>将字符串反序列化为对象</summary>
            <param name="xml">xml字符串</param>
            <param name="type">要生成的对象类型</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="T:App.SetDataInfo">
            <summary>设置DataConn数据库连接对象操作类</summary>
        </member>
        <member name="F:App.SetDataInfo._DataInfoOp">
            <summary>获取或设置需要配置的DataInfo对象(默认值：null)</summary>
        </member>
        <member name="F:App.SetDataInfo._Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="F:App.SetDataInfo._ConnName">
            <summary>获取或设置配置节名称(默认值：AppConnStrings)</summary>
        </member>
        <member name="F:App.SetDataInfo._ConfigName">
            <summary>获取或设置配置名称(默认值：default)</summary>
        </member>
        <member name="M:App.SetDataInfo.#ctor">
            <summary>构造类并进行初始配置操作</summary>
        </member>
        <member name="M:App.SetDataInfo.#ctor(App.DataInfo)">
            <summary>使用DataInfo对象构造类</summary>
            <param name="obj">DataInfo对象</param>
        </member>
        <member name="M:App.SetDataInfo.#ctor(App.DataInfo,System.String)">
            <summary>使用DataInfo对象及配置名称构造类</summary>
            <param name="obj">DataInfo对象</param>
            <param name="configName">配置名称</param>
        </member>
        <member name="M:App.SetDataInfo.ConfigSet">
            <summary>使用配置设置DataInfo对象属性</summary>
        </member>
        <member name="M:App.SetDataInfo.ConfigSet(System.String)">
            <summary>使用配置设置DataInfo对象属性</summary>
            <param name="vstr">验证字符串</param>
        </member>
        <member name="M:App.SetDataInfo.ConfigSet(App.DataInfo,System.Configuration.Configuration,System.String,System.String,System.String)">
            <summary>使用配置设置DataInfo对象属性</summary>
            <param name="obj">DataInfo对象</param>
            <param name="config">配置对象</param>
            <param name="connName">配置节名称</param>
            <param name="configName">配置名称</param>
            <param name="vstr">验证字符串</param>
        </member>
        <member name="P:App.SetDataInfo.DataInfoOp">
            <summary>获取或设置需要配置的DataInfo对象(默认值：null)</summary>
        </member>
        <member name="P:App.SetDataInfo.Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="P:App.SetDataInfo.ConnName">
            <summary>获取或设置配置节名称(默认值：AppConnStrings)</summary>
        </member>
        <member name="P:App.SetDataInfo.ConfigName">
            <summary>获取或设置配置名称(默认值：default)</summary>
        </member>
        <member name="T:App.KeyConfig">
            <summary>DES算法密匙提供类</summary> 
        </member>
        <member name="T:App.IKeyConfig">
            <summary>DES算法密匙提供类接口</summary> 
        </member>
        <member name="M:App.IKeyConfig.SetDESKeyIv(System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>根据索引设置DES密匙及初始向量</summary>
            <param name="num">索引值</param>
            <param name="keys">返回byte数组类型密匙</param>
            <param name="keyiv">返回byte数组类型初始向量</param>
        </member>
        <member name="M:App.IKeyConfig.SetTripleDESKeyIv(System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>根据索引设置TripleDES密匙及初始向量</summary>
            <param name="num">索引值</param>
            <param name="keys">返回byte数组类型密匙</param>
            <param name="keyiv">返回byte数组类型初始向量</param>
        </member>
        <member name="P:App.IKeyConfig.DESKey">
            <summary>DES密匙16进制字符串数组</summary>
        </member>
        <member name="P:App.IKeyConfig.TripleDESKey">
            <summary>TripleDES密匙16进制字符串数组</summary>
        </member>
        <member name="P:App.IKeyConfig.DESIv">
            <summary>DES初始向量16进制字符串</summary>
        </member>
        <member name="P:App.IKeyConfig.TripleDESIv">
            <summary>TripleDES初始向量16进制字符串</summary>
        </member>
        <member name="F:App.KeyConfig._DESKey">
            <summary>DES密匙16进制字符串数组</summary>
        </member>
        <member name="F:App.KeyConfig._TripleDESKey">
            <summary>TripleDES密匙16进制字符串数组</summary>
        </member>
        <member name="F:App.KeyConfig._DESIv">
            <summary>DES初始向量16进制字符串</summary>
        </member>
        <member name="F:App.KeyConfig._TripleDESIv">
            <summary>TripleDES初始向量16进制字符串</summary>
        </member>
        <member name="M:App.KeyConfig.App#IKeyConfig#SetDESKeyIv(System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>根据索引设置DES密匙及初始向量</summary>
            <param name="num">索引值</param>
            <param name="keys">返回byte数组类型密匙</param>
            <param name="keyiv">返回byte数组类型初始向量</param>
        </member>
        <member name="M:App.KeyConfig.App#IKeyConfig#SetTripleDESKeyIv(System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>根据索引设置TripleDES密匙及初始向量</summary>
            <param name="num">索引值</param>
            <param name="keys">返回byte数组类型密匙</param>
            <param name="keyiv">返回byte数组类型初始向量</param>
        </member>
        <member name="P:App.KeyConfig.App#IKeyConfig#DESKey">
            <summary>DES密匙16进制字符串数组</summary>
        </member>
        <member name="P:App.KeyConfig.App#IKeyConfig#TripleDESKey">
            <summary>DES密匙16进制字符串数组</summary>
        </member>
        <member name="P:App.KeyConfig.App#IKeyConfig#DESIv">
            <summary>DES初始向量16进制字符串</summary>
        </member>
        <member name="P:App.KeyConfig.App#IKeyConfig#TripleDESIv">
            <summary>TripleDES初始向量16进制字符串</summary>
        </member>
        <member name="T:App.ConfigInfo">
            <summary>配置文件操作类</summary>
        </member>
        <member name="F:App.ConfigInfo._FilePath">
            <summary>获取或设置配置文件路径(默认值：空字符串)</summary>
        </member>
        <member name="F:App.ConfigInfo._Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="M:App.ConfigInfo.#ctor">
            <summary>初始化类</summary>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.#ctor(System.String)">
            <summary>使用配置文件路径初始化类并使用配置文件路径返回配置文件对象</summary>
            <param name="filePath">配置文件路径</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.GetConfig">
            <summary>返回配置文件对象</summary>
            <returns>返回配置文件对象</returns>
        </member>
        <member name="M:App.ConfigInfo.GetConfig(System.String)">
            <summary>使用配置文件路径返回配置文件对象</summary>
            <param name="filePath">配置文件路径</param>
            <returns>返回配置文件对象</returns>
        </member>
        <member name="M:App.ConfigInfo.NewConfig">
            <summary>初始化配置文件对象</summary>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.NewConfig(System.String)">
            <summary>使用配置文件路径初始化配置文件对象</summary>
            <param name="filePath">配置文件路径</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.IsAppSetting(System.String)">
            <summary>确定指定的AppSetting是否存在，存在返回true,否则返回false</summary>
            <param name="keyName">AppSetting键名称</param>
            <returns>存在返回true,否则返回false</returns>
        </member>
        <member name="M:App.ConfigInfo.IsSection(System.String)">
            <summary>确定指定的配置节是否存在，存在返回true,否则返回false</summary>
            <param name="sectionName">配置节名称</param>
            <returns>存在返回true,否则返回false</returns>
        </member>
        <member name="M:App.ConfigInfo.GetAppSetting(System.String)">
            <summary>返回指定AppSetting键名称的值。</summary>
            <param name="keyName">AppSetting键名称</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.SetAppSetting(System.String,System.String)">
            <summary>根据AppSetting键名称设置指定AppSetting的值，如果该键不存在则建立该健并设置该健的值，否则将更新该健的值。</summary>
            <param name="keyName">AppSetting键名称</param>
            <param name="valueStr">AppSetting键值</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.SetAppSetting(System.String,System.String,System.Boolean)">
            <summary>根据AppSetting键名称设置指定AppSetting的值，如果该键不存在则建立该健并设置该健的值。</summary>
            <param name="keyName">AppSetting键名称</param>
            <param name="valueStr">AppSetting键值</param>
            <param name="isUp">该值为true时,如果指定的健已存在，则更新该键的值，否则不更新该键的值</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.DelAppSetting(System.String)">
            <summary>移除AppSettings中具有指定键的项。</summary>
            <param name="keyName">AppSetting键名称</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.GetSection(System.String)">
            <summary>返回指定节名称的节对象。</summary>
            <param name="sectionName">节名称</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.SetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>根据配置节名称设置指定节对象，如果节名称不存在则建立该节名称并设置该节名称的节对象，否则将更新该节名称的节对象。</summary>
            <param name="sectionName">节名称</param>
            <param name="valueSection">ConfigurationSection节对象</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.SetSection(System.String,System.Configuration.ConfigurationSection,System.Boolean)">
            <summary>根据配置节名称设置指定节对象，如果节名称不存在则建立该节名称并设置该节名称的节对象。</summary>
            <param name="sectionName">节名称</param>
            <param name="valueSection">ConfigurationSection节对象</param>
            <param name="isUp">该值为true时,如果指定的节对象已存在，则更新该节名称的节对象，否则不更新该节名称的节对象</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.DelSection(System.String)">
            <summary>移除配置文件中指定节名称的节。</summary>
            <param name="sectionName">节名称</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.Save">
            <summary>将当前的配置写入到配置文件中</summary>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.Save(System.Boolean)">
            <summary>将当前的配置写入到配置文件中</summary>
            <param name="forceSaveAll">如果在未修改配置的情况下保存配置，则为 true；否则，为 false。</param>
            <returns></returns>
        </member>
        <member name="M:App.ConfigInfo.Save(System.Configuration.ConfigurationSaveMode,System.Boolean)">
            <summary>将当前的配置写入到配置文件中</summary>
            <param name="saveMode">ConfigurationSaveMode 枚举 
            <para>Modified 仅将修改的属性写出到配置文件，即使值和继承值相同。 </para> 
            <para>Minimal 仅将不同于继承值的属性写出到配置文件。 </para> 
            <para>Full 将所有属性都写出到配置文件。这在创建信息配置文件时或将配置值从一台计算机移动到另一台计算机时最有用。 </para> 
            </param>
            <param name="forceSaveAll">如果在未修改配置的情况下保存配置，则为 true；否则，为 false。</param>
            <returns></returns>
        </member>
        <member name="P:App.ConfigInfo.FilePath">
            <summary>获取或设置配置文件路径(默认值：空字符串)</summary>
        </member>
        <member name="P:App.ConfigInfo.Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="T:App.SevenZip">
            <summary>解压缩操作类
            <para>解压格式支持：7z、zip、gzip、bzip2、tar、rar、cab、iso、arj、lzh、chm、wim、z、cpio、rpm、deb、nsis</para>  
            <para>压缩格式支持：7z、zip、gzip、bzip2、tar</para>  
            </summary>
        </member>
        <member name="F:App.SevenZip._ZipPath">
            <summary>获取或设置7Zip动态库物理路径(默认值：空字符串)例：c:\Program Files\7-Zip\7z.dll</summary>
        </member>
        <member name="F:App.SevenZip._Password">
            <summary>获取或设置解压或压缩时使用的密匙(默认值：空字符串)</summary>
        </member>
        <member name="F:App.SevenZip._Paths">
            <summary>获取或设置操作的路径列表(默认值：new List&lt;string&gt;())</summary>
        </member>
        <member name="F:App.SevenZip._CompressEmptyDir">
            <summary>获取或设置压缩文件时是否压缩空目录(默认值：true)</summary>
        </member>
        <member name="F:App.SevenZip._CompressArchiveFormat">
            <summary>获取或设置输出的压缩文件格式(默认值：1)
            <para>格式：1：7z，2：zip，3：gzip，4：bzip2，5：tar，6：xz</para>
            </summary>
        </member>
        <member name="F:App.SevenZip._FastCompress">
            <summary>获取或设置压缩文件时是否创建固实压缩文件(默认值：false)</summary>
        </member>
        <member name="F:App.SevenZip._CompressMode">
            <summary>获取或设置压缩文件已存在时的操作模式, 1 替换 2 替换并追加(默认值：1)</summary>
        </member>
        <member name="F:App.SevenZip._TempFolderPath">
            <summary>获取或设置临时文件夹(默认值：空字符串)</summary>
        </member>
        <member name="F:App.SevenZip._VolumeSize">
            <summary>获取或设置分卷文件大小。该值为0时不执行分卷压缩(默认值：0)</summary>
        </member>
        <member name="F:App.SevenZip._PreserveDirectoryRoot">
            <summary>获取或设置是否锁定压缩文件(默认值：false)</summary>
        </member>
        <member name="F:App.SevenZip._CompressLevel">
            <summary>获取或设置压缩级别, 1：存储，2：最快，3：较快，4：标准，5：较好，6：最好(默认值：4)</summary>
        </member>
        <member name="F:App.SevenZip._EncryptHeaders">
            <summary>获取或设置是否加密文件名(默认值：false)</summary>
        </member>
        <member name="F:App.SevenZip._ScanOnlyWritable">
            <summary>获取或设置是否扫描文件(默认值：true)</summary>
        </member>
        <member name="F:App.SevenZip.GetFileNames">
            <summary>执行SevenZip解压或压缩文件操作时，每次解压或压缩一项操作完成引发事件的操作方法委托(默认值：null)</summary>
        </member>
        <member name="F:App.SevenZip.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.SevenZip.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.SevenZip.#ctor">
            <summary>构造类</summary>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.#ctor(System.String)">
            <summary>使用7Zip动态库物理路径构造类</summary>
            <param name="zipPath">7Zip动态库物理路径，例：c:\Program Files\7-Zip\7z.dll</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.#ctor(System.String,System.String)">
            <summary>使用7Zip动态库物理路径和密匙构造类</summary>
            <param name="zipPath">7Zip动态库物理路径，例：c:\Program Files\7-Zip\7z.dll</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.SevenZip.SetTempFolder(System.String)">
            <summary>根据文件路径设置临时文件夹</summary>
            <param name="filePath">文件路径</param>
            <returns>根据文件路径设置临时文件夹</returns>
        </member>
        <member name="M:App.SevenZip.GetOutArchiveFormat(System.Byte)">
            <summary>返回压缩文件格式枚举对象(默认返回7z)</summary>
            <param name="caf">压缩文件格式
            <para>格式：1：7z，2：zip，3：gzip，4：bzip2，5：tar，6：xz</para>
            </param>
            <returns>返回压缩文件格式枚举对象</returns>
        </member>
        <member name="M:App.SevenZip.GetCompressionMode(System.Byte)">
            <summary>返回压缩文件已存在时的操作模式枚举对象</summary>
            <param name="mode">操作模式
            <para>格式：1：替换，2：替换并追加</para>
            </param>
            <returns>返回压缩文件已存在时的操作模式枚举对象</returns>
        </member>
        <member name="M:App.SevenZip.GetCompressionLevel(System.Byte)">
            <summary>返回压缩级别枚举对象(默认返回标准)</summary>
            <param name="lv">操作模式
            <para>格式：1：存储，2：最快，3：较快，4：标准，5：较好，6：最好</para>
            </param>
            <returns>返回压缩级别枚举对象</returns>
        </member>
        <member name="M:App.SevenZip.Set7ZipPath(System.String)">
            <summary>设置7Zip动态库物理路径</summary>
            <param name="zipPath">7Zip动态库物理路径</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.DeZip(System.String,System.String)">
            <summary>解压一个压缩文件</summary>
            <param name="filePath">需要解压的文件路径</param>
            <param name="savePath">解压后保存的文件夹路径</param>
            <returns>解压成功返回true否则返回false</returns>
        </member>
        <member name="M:App.SevenZip.DeZip(System.String,System.String,System.String)">
            <summary>解压一个压缩文件</summary>
            <param name="filePath">需要解压的文件路径</param>
            <param name="savePath">解压后保存的文件夹路径</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.DeMultiZip(System.String,System.String)">
            <summary>解压分卷压缩文件</summary>
            <param name="filePath">需要解压的第一个分卷压缩文件路径</param>
            <param name="savePath">解压后保存的文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.DeMultiZip(System.String,System.String,System.String)">
            <summary>解压分卷压缩文件</summary>
            <param name="filePath">需要解压的第一个分卷压缩文件路径</param>
            <param name="savePath">解压后保存的文件夹路径</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.SetExtractorParameters(SevenZip.SevenZipExtractor)">
            <summary>设置解压属性</summary>
            <param name="tmp">SevenZipExtractor对象</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.tmp_Extraction_FileExtractionFinished(System.Object,SevenZip.FileInfoEventArgs)">
            <summary>解压一项完成引发事件的委托方法</summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的FileInfoEventArgs</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String,System.String)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String,System.Boolean)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String,System.Boolean,System.String)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="password">密匙</param>
            <param name="searchPattern">搜索字符串（如“*.txt”）</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.String,System.String,System.Boolean)">
            <summary>压缩文件夹并保存成一个文件</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="searchPattern">搜索字符串（如“*.txt”）</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream,System.String)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream,System.Boolean)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <param name="password">密匙</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="password">密匙</param>
            <param name="searchPattern">搜索字符串（如“*.txt”）</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnDirZip(System.String,System.IO.Stream,System.String,System.Boolean)">
            <summary>压缩文件夹并保存到字节流</summary>
            <param name="dirPath">需要压缩的文件夹路径</param>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="searchPattern">搜索字符串（如“*.txt”）</param>
            <param name="recursion">是否递归文件夹子目录</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnFileZip(System.String,System.String[])">
            <summary>压缩一个文件或多个文件并保存成一个文件</summary>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="filePaths">需要压缩的文件路径数组</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnFileZip(System.IO.Stream,System.String[])">
            <summary>压缩一个文件或多个文件并保存到字节流</summary>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="filePaths">需要压缩的文件路径数组</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnFileZipEncrypt(System.String,System.String,System.String[])">
            <summary>压缩一个文件或多个文件并加密保存成一个文件</summary>
            <param name="savePath">压缩后保存的文件路径</param>
            <param name="password">密匙</param>
            <param name="filePaths">需要压缩的文件路径数组</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.EnFileZipEncrypt(System.IO.Stream,System.String,System.String[])">
            <summary>压缩一个文件或多个文件并加密保存到字节流</summary>
            <param name="stream">压缩后保存到的字节流</param>
            <param name="password">密匙</param>
            <param name="filePaths">需要压缩的文件路径数组</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.SetCompressorParameters(SevenZip.SevenZipCompressor)">
            <summary>设置压缩属性</summary>
            <param name="tmp">SevenZipCompressor对象</param>
            <returns></returns>
        </member>
        <member name="M:App.SevenZip.tmp_Compressor_FileCompressionStarted(System.Object,SevenZip.FileNameEventArgs)">
            <summary>压缩一项开始时引发事件的委托方法</summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的FileNameEventArgs</param>
            <returns></returns>
        </member>
        <member name="P:App.SevenZip.Paths">
            <summary>获取或设置操作的路径列表(默认值：new string[0])</summary>
        </member>
        <member name="P:App.SevenZip.ZipPath">
            <summary>获取或设置7Zip动态库物理路径(默认值：空字符串)例：c:\Program Files\7-Zip\7z.dll</summary>
        </member>
        <member name="P:App.SevenZip.Password">
            <summary>获取或设置解压或压缩时使用的密匙(默认值：空字符串)</summary>
        </member>
        <member name="P:App.SevenZip.CompressEmptyDir">
            <summary>压缩文件时是否压缩空目录(默认值：true)</summary>
        </member>
        <member name="P:App.SevenZip.CompressArchiveFormat">
            <summary>获取或设置输出的压缩文件格式(默认值：1)
            <para>格式：1：7z，2：zip，3：gzip，4：bzip2，5：tar，6：xz</para>   
            </summary>
        </member>
        <member name="P:App.SevenZip.FastCompress">
            <summary>获取或设置压缩文件时是否创建固实压缩文件(默认值：false)</summary>
        </member>
        <member name="P:App.SevenZip.CompressMode">
            <summary>获取或设置压缩文件已存在时的操作模式, 1 替换 2 替换并追加(默认值：1)</summary>
        </member>
        <member name="P:App.SevenZip.TempFolderPath">
            <summary>获取或设置临时文件夹(默认值：空字符串)</summary>
        </member>
        <member name="P:App.SevenZip.VolumeSize">
            <summary>获取或设置分卷文件大小。该值为0时不执行分卷压缩(默认值：0)</summary>
        </member>
        <member name="P:App.SevenZip.PreserveDirectoryRoot">
            <summary>获取或设置是否锁定压缩文件(默认值：false)</summary>
        </member>
        <member name="P:App.SevenZip.CompressLevel">
            <summary>获取或设置压缩级别, 1：存储，2：最快，3：较快，4：标准，5：较好，6：最好(默认值：4)</summary>
        </member>
        <member name="P:App.SevenZip.EncryptHeaders">
            <summary>获取或设置是否加密文件名(默认值：false)</summary>
        </member>
        <member name="P:App.SevenZip.ScanOnlyWritable">
            <summary>获取或设置是否扫描文件(默认值：true)</summary>
        </member>
        <member name="T:App.OleDbData">
            <summary>OleDb数据库操作类</summary>
        </member>
        <member name="T:App.IData">
            <summary>数据库操作接口</summary>
        </member>
        <member name="M:App.IData.ConnTest">
            <summary>测试并连接数据库,返回true成功 否则失败</summary>
            <returns>测试并连接数据库,返回true成功 否则失败</returns>
        </member>
        <member name="M:App.IData.GetES(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.Int32,System.Int32,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetRow(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.IData.UP(System.String,System.String[])">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.IData.GetES(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetDT(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetRow(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.IData.UP(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.IData.GetESConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetRowConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.IData.UPConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.IData.GetESConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.IData.GetRowConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.IData.UPConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="P:App.IData.AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="P:App.IData.CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.IData.ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.IData.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 长字符串型 其它 字符型</summary>
        </member>
        <member name="F:App.OleDbData._AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="F:App.OleDbData._CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="F:App.OleDbData._ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.OleDbData._DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 OleDbType.LongVarChar 其它 字符型</summary>
        </member>
        <member name="M:App.OleDbData.#ctor">
            <summary>构造类</summary>
        </member>
        <member name="M:App.OleDbData.ConnTest">
            <summary>测试并连接数据库,返回true成功 否则失败</summary>
            <returns>测试并连接数据库,返回true成功 否则失败</returns>
        </member>
        <member name="M:App.OleDbData.GetES(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.Int32,System.Int32,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetRow(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OleDbData.UP(System.String,System.String[])">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OleDbData.GetES(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDT(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetRow(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OleDbData.UP(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OleDbData.GetESConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetRowConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OleDbData.UPConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OleDbData.GetESConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OleDbData.GetRowConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OleDbData.UPConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbComPar(System.String[])">
            <summary>根据ArrayList返回OleDbCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbComArr(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OleDbCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbParCom(System.String[])">
            <summary>根据ArrayList返回OleDbCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbArrCom(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OleDbCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbParCom(System.Collections.Generic.List{System.Int32},System.String[])">
            <summary>根据ArrayList返回OleDbCommand(params可变数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="M:App.OleDbData.GetOleDbArrCom(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OleDbCommand(string类型List数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">string类型List数组</param>
            <returns>返回一个OleDbCommand</returns>
        </member>
        <member name="P:App.OleDbData.AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="P:App.OleDbData.CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.OleDbData.ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.OleDbData.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 OleDbType.LongVarChar 其它 字符型</summary>
        </member>
        <member name="T:App.OracleData">
            <summary>Oracle数据库操作类</summary>
        </member>
        <member name="F:App.OracleData._AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="F:App.OracleData._CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="F:App.OracleData._ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.OracleData._DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 OracleType.Clob 其它 字符型</summary>
        </member>
        <member name="M:App.OracleData.#ctor">
            <summary>构造类</summary>
        </member>
        <member name="M:App.OracleData.ConnTest">
            <summary>测试并连接数据库,返回true成功 否则失败</summary>
            <returns>测试并连接数据库,返回true成功 否则失败</returns>
        </member>
        <member name="M:App.OracleData.GetES(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.Int32,System.Int32,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetRow(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OracleData.UP(System.String,System.String[])">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OracleData.GetES(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDT(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetRow(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OracleData.UP(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OracleData.GetESConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetRowConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OracleData.UPConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OracleData.GetESConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.OracleData.GetRowConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.OracleData.UPConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.OracleData.GetOracComPar(System.String[])">
            <summary>根据ArrayList返回OracleCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracComArr(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OracleCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracleParCom(System.String[])">
            <summary>根据ArrayList返回OracleCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracleArrCom(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OracleCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracleParCom(System.Collections.Generic.List{System.Int32},System.String[])">
            <summary>根据ArrayList返回OracleCommand(params可变数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">params可变参数数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracleArrCom(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回OracleCommand(string类型List数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">string类型List数组</param>
            <returns>返回一个OracleCommand</returns>
        </member>
        <member name="M:App.OracleData.GetOracleFormat(System.String)">
            <summary>将Oracle语句中的?按照顺序替换成:Par + i格式并返回</summary>
            <param name="sql">需要替换的Sql语句</param>
            <returns>返回已替换完成的Sql语句</returns>
        </member>
        <member name="P:App.OracleData.AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="P:App.OracleData.CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.OracleData.ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.OracleData.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 OracleType.Clob 其它 字符型</summary>
        </member>
        <member name="T:App.DataInfo">
            <summary>数据集操作类</summary>
        </member>
        <member name="T:App.DataConn">
            <summary>数据库连接对象操作类</summary>
        </member>
        <member name="F:App.DataConn._SqlType">
            <summary>获取或设置数据库连接类型，OleDb: oledb 、Sql server: sql 、Oracl: oracl(默认值：oledb)</summary>
        </member>
        <member name="F:App.DataConn._OleDbConnString">
            <summary>获取或设置OleDb数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.DataConn._SqlConnString">
            <summary>获取或设置Sql数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.DataConn._OraclConnString">
            <summary>获取或设置Oracl数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="M:App.DataConn.#ctor">
            <summary>构造类</summary>
        </member>
        <member name="P:App.DataConn.SqlType">
            <summary>获取或设置数据库连接类型，OleDb: oledb 、Sql server: sql 、Oracl: oracl(默认值：oledb)</summary>
        </member>
        <member name="P:App.DataConn.OleDbConnString">
            <summary>获取或设置OleDb数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataConn.SqlConnString">
            <summary>获取或设置Sql数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataConn.OraclConnString">
            <summary>获取或设置Oracl数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.DataInfo._DataOp">
            <summary>获取或设置数据库操作对象(默认值：null)</summary>
        </member>
        <member name="F:App.DataInfo._ConfigOp">
            <summary>获取或设置配置文件操作对象(默认值：new SetDataInfo())</summary>
        </member>
        <member name="F:App.DataInfo._Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="F:App.DataInfo._ConfigName">
            <summary>获取或设置配置名称(默认值：default)</summary>
        </member>
        <member name="F:App.DataInfo._OpName">
            <summary>获取或设置数据操作接口名称，Access: acc 、Sql server: sql 、Oracl: oracl 、MySql: mysql(默认值：sql)</summary>
        </member>
        <member name="F:App.DataInfo.BasePath">
            <summary>获取或设置数据库连接基路径(默认值：空字符串)</summary>
        </member>
        <member name="F:App.DataInfo.Page">
            <summary>获取或设置页面对象</summary>
        </member>
        <member name="M:App.DataInfo.#ctor">
            <summary>构造类并进行读取配置操作</summary>
        </member>
        <member name="M:App.DataInfo.#ctor(System.Boolean)">
            <summary>构造类并选择是否进行读取配置操作</summary>
            <param name="isSet">是否进行初始配置操作(true:执行初始配置操作，否则不执行初始配置操作)</param>
        </member>
        <member name="M:App.DataInfo.#ctor(System.String)">
            <summary>构造类并使用指定配置名称进行读取配置操作</summary>
            <param name="configName">配置名称</param>
        </member>
        <member name="M:App.DataInfo.#ctor(System.Web.UI.Page)">
            <summary>构造类并进行读取配置操作</summary>
            <param name="page">设置页面对象</param>
        </member>
        <member name="M:App.DataInfo.#ctor(System.Web.UI.Page,System.Boolean)">
            <summary>构造类并选择是否进行读取配置操作</summary>
            <param name="page">设置页面对象</param>
            <param name="isSet">是否进行初始配置操作(true:执行初始配置操作，否则不执行初始配置操作)</param>
        </member>
        <member name="M:App.DataInfo.#ctor(System.Web.UI.Page,System.String)">
            <summary>构造类并使用指定配置名称进行读取配置操作</summary>
            <param name="page">设置页面对象</param>
            <param name="configName">配置名称</param>
        </member>
        <member name="M:App.DataInfo.LoadConfig">
            <summary>读取配置操作</summary>
        </member>
        <member name="M:App.DataInfo.GetConnStr">
            <summary>返回数据库连接字符串({$BasePath}替换应用程序跟路径DataInfo.BasePath)</summary>
            <returns>返回数据库连接字符串</returns>
        </member>
        <member name="M:App.DataInfo.ConnTest">
            <summary>测试并连接数据库,返回true成功 否则失败</summary>
            <returns>测试并连接数据库,返回true成功 否则失败</returns>
        </member>
        <member name="M:App.DataInfo.GetES(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.Int32,System.Int32,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetRow(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.DataInfo.UP(System.String,System.String[])">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.DataInfo.GetES(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDT(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetRow(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.DataInfo.UP(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.DataInfo.GetESConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetRowConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.DataInfo.UPConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.DataInfo.GetESConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.DataInfo.GetRowConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.DataInfo.UPConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="P:App.DataInfo.AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="P:App.DataInfo.CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.DataInfo.ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.DataInfo.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 OleDbType.LongVarChar 其它 字符型</summary>
        </member>
        <member name="P:App.DataInfo.DataOp">
            <summary>获取或设置数据库操作对象(默认值：null)</summary>
        </member>
        <member name="P:App.DataInfo.ConfigOp">
            <summary>获取或设置配置文件操作对象(默认值：new SetDataInfo())</summary>
        </member>
        <member name="P:App.DataInfo.Config">
            <summary>获取或设置配置文件对象(默认值：null)</summary>
        </member>
        <member name="P:App.DataInfo.ConfigName">
            <summary>获取或设置配置名称(默认值：default)</summary>
        </member>
        <member name="P:App.DataInfo.OpName">
            <summary>获取或设置数据操作接口名称，Access: acc 、Sql server: sql 、Oracl: oracl 、MySql: mysql(默认值：sql)</summary>
        </member>
        <member name="T:App.EvalCompute">
            <summary>算术逆波兰表达式计算静态操作类</summary>
        </member>
        <member name="M:App.EvalCompute.Compute(System.String)">
            <summary>算术逆波兰表达式计算</summary>
            <param name="s">字符串表达式</param>
            <returns></returns>
        </member>
        <member name="M:App.EvalCompute.BuildingEval(System.String)">
            <summary>算术逆波兰表达式生成.</summary>
            <param name="s">字符串表达式</param>
            <returns></returns>
        </member>
        <member name="M:App.EvalCompute.Power(System.Char)">
            <summary>优先级别测试函数</summary>
            <param name="opr">测试字符</param>
            <returns></returns>
        </member>
        <member name="M:App.EvalCompute.FormatSpace(System.String)">
            <summary>规范化逆波兰表达式</summary>
            <param name="s">需要格式化的字符串</param>
            <returns></returns>
        </member>
        <member name="T:App.ConfigTripleDes">
            <summary>加密配置提供程序类</summary>
        </member>
        <member name="F:App.ConfigTripleDes._Name">
            <summary>获取保护配置提供程序名称(默认值：空字符串)</summary>
        </member>
        <member name="F:App.ConfigTripleDes._Flag">
            <summary>获取加密标示(默认值：0)</summary>
        </member>
        <member name="F:App.ConfigTripleDes._KeyConfigObject">
            <summary>获取或设置DES算法密匙提供对象(默认值：new KeyConfig())</summary>
        </member>
        <member name="F:App.ConfigTripleDes._TripleDes">
            <summary>获取或设置TripleDES算法操作对象(默认值：new TripleDesInfo())</summary>
        </member>
        <member name="F:App.ConfigTripleDes._TripleDesKey">
            <summary>获取或设置TripleDES算法byte数组类型密匙(默认值：null)</summary>
        </member>
        <member name="F:App.ConfigTripleDes._TripleDesIv">
            <summary>获取或设置TripleDES算法byte数组类型初始向量(默认值：null)</summary>
        </member>
        <member name="M:App.ConfigTripleDes.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>初始化提供程序</summary>
            <param name="name">该提供程序的友好名称</param>
            <param name="config">名称/值对的集合，表示在配置中为该提供程序指定的、提供程序特定的属性</param>
        </member>
        <member name="M:App.ConfigTripleDes.Encrypt(System.Xml.XmlNode)">
            <summary>加密从配置文件传递的 XmlNode 对象</summary>
            <param name="node">需要加密的配置节的XmlNode对象</param>
            <returns>返回已加密的XmlNode对象</returns>
        </member>
        <member name="M:App.ConfigTripleDes.Decrypt(System.Xml.XmlNode)">
            <summary>解密从配置文件传递的 XmlNode 对象</summary>
            <param name="encryptedNode">需要解密的配置节的XmlNode对象</param>
            <returns>返回已解密的XmlNode对象</returns>
        </member>
        <member name="P:App.ConfigTripleDes.Name">
            <summary>获取保护配置提供程序名称(默认值：空字符串)</summary>
        </member>
        <member name="P:App.ConfigTripleDes.Flag">
            <summary>获取加密标示(默认值：0)</summary>
        </member>
        <member name="T:App.Ftp">
            <summary>Ftp静态操作类</summary> 
        </member>
        <member name="F:App.Ftp._Name">
            <summary>设置或获取Ftp的登录用户名。(默认值：空字符串)</summary>
        </member>
        <member name="F:App.Ftp._Pwd">
            <summary>设置或获取Ftp的登录密码。(默认值：空字符串)</summary>
        </member>
        <member name="F:App.Ftp._UrlIp">
            <summary>设置或获取Ftp的域名或IP地址。例：www.aaa.com或222.66.77.123(默认值：空字符串)</summary>
        </member>
        <member name="F:App.Ftp._Scheme">
            <summary>设置或获取Ftp的传输协议名称。(默认值：ftp://)</summary>
        </member>
        <member name="F:App.Ftp._Port">
            <summary>设置或获取Ftp的端口号。(默认值：21)</summary>
        </member>
        <member name="F:App.Ftp.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.Ftp.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.Ftp.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.Ftp.UpLoadFile(System.String,System.String)">
            <summary>ftp上传文件，上传成功返回true，否则返回false</summary>
            <param name="filePath">本地文件的物理地址</param>
            <param name="savePath">远程文件保存路径(包含文件名称的相对路径)，例：/image/im.jpg</param>
            <returns></returns>
        </member>
        <member name="P:App.Ftp.Name">
            <summary>设置或获取Ftp的登录用户名。(默认值：空字符串)</summary>
        </member>
        <member name="P:App.Ftp.Pwd">
            <summary>设置或获取Ftp的登录密码。(默认值：空字符串)</summary>
        </member>
        <member name="P:App.Ftp.UrlIp">
            <summary>设置或获取Ftp的域名或IP地址。例：www.aaa.com或222.66.77.123(默认值：空字符串)</summary>
        </member>
        <member name="P:App.Ftp.Scheme">
            <summary>设置或获取Ftp的传输协议名称。(默认值：ftp://)</summary>
        </member>
        <member name="P:App.Ftp.Port">
            <summary>设置或获取Ftp的端口号。(默认值：21)</summary>
        </member>
        <member name="T:App.FileSys">
            <summary>文件及文件夹静态操作类</summary>
        </member>
        <member name="M:App.FileSys.NewFile(System.String)">
            <summary>新建文件</summary>
            <param name="inPath">需要新建的文件全路径</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.NewFile(System.String,System.Boolean)">
            <summary>新建文件</summary>
            <param name="inPath">需要新建的文件全路径</param>
            <param name="isWrite">该值为true,则创建并改写文件，否则只创建文件</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.DelFile(System.String)">
            <summary>删除文件</summary>
            <param name="inPath">需要删除的文件全路径</param>
            <returns>成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.SetFileNormal(System.String)">
            <summary>取消文件只读属性</summary>
            <param name="inPath">需要取消只读属性的文件全路径</param>
            <returns>取消成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.NewDir(System.String)">
            <summary>新建文件夹，新建成功返回 true 新建失败返回 false</summary>
            <param name="path">要新建的文件夹路径，路径末尾必须携带"\"。</param>
            <returns>新建成功返回 true 新建失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoNewDir(System.String)">
            <summary>FSO新建文件夹，新建成功返回 true 新建失败返回 false</summary>
            <param name="path">要新建的文件夹路径，路径末尾必须携带"\"。</param>
            <returns>新建成功返回 true 新建失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.MoveDir(System.String,System.String)">
            <summary>移动文件夹，移动成功返回 true 移动失败返回 false</summary>
            <param name="path">要移动的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">移动到的目的路径，路径末尾必须携带"\"。</param>
            <returns>移动成功返回 true 移动失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoMoveDir(System.String,System.String)">
            <summary>FSO移动文件夹，移动成功返回 true 移动失败返回 false</summary>
            <param name="path">要移动的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">移动到的目的路径，路径末尾必须携带"\"。</param>
            <returns>移动成功返回 true 移动失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.CopyDir(System.String,System.String)">
            <summary>复制文件夹，复制成功返回 true 复制失败返回 false</summary>
            <param name="path">要复制的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">复制到的目的路径，路径末尾必须携带"\"。</param>
            <returns>复制成功返回 true 复制失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoCopyDir(System.String,System.String)">
            <summary>FSO复制文件夹，复制成功返回 true 复制失败返回 false</summary>
            <param name="path">要复制的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">复制到的目的路径，路径末尾必须携带"\"。</param>
            <returns>复制成功返回 true 复制失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.DelDir(System.String)">
            <summary>删除文件夹，删除成功返回 true 删除失败返回 false</summary>
            <param name="path">要删除的文件夹路径，路径末尾必须携带"\"。</param>
            <returns>删除成功返回 true 删除失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoDelDir(System.String)">
            <summary>FSO删除文件夹，删除成功返回 true 删除失败返回 false</summary>
            <param name="path">要删除的文件夹路径，路径末尾必须携带"\"。</param>
            <returns>删除成功返回 true 删除失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.NewDir(System.String,System.String@)">
            <summary>新建文件夹，新建成功返回 true 新建失败返回 false</summary>
            <param name="path">要新建的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>新建成功返回 true 新建失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoNewDir(System.String,System.String@)">
            <summary>FSO新建文件夹，新建成功返回 true 新建失败返回 false</summary>
            <param name="path">要新建的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>新建成功返回 true 新建失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.MoveDir(System.String,System.String,System.String@)">
            <summary>移动文件夹，移动成功返回 true 移动失败返回 false</summary>
            <param name="path">要移动的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">移动到的目的路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>移动成功返回 true 移动失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoMoveDir(System.String,System.String,System.String@)">
            <summary>FSO移动文件夹，移动成功返回 true 移动失败返回 false</summary>
            <param name="path">要移动的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">移动到的目的路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>移动成功返回 true 移动失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.CopyDir(System.String,System.String,System.String@)">
            <summary>复制文件夹，复制成功返回 true 复制失败返回 false</summary>
            <param name="path">要复制的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">复制到的目的路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>复制成功返回 true 复制失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.CopyDirs(System.String,System.String)">
            <summary>复制文件夹操作</summary>
            <param name="path">要复制的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">复制到的目的路径，路径末尾必须携带"\"。</param>
        </member>
        <member name="M:App.FileSys.FsoCopyDir(System.String,System.String,System.String@)">
            <summary>FSO复制文件夹，复制成功返回 true 复制失败返回 false</summary>
            <param name="path">要复制的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="mpath">复制到的目的路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>复制成功返回 true 复制失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.DelDir(System.String,System.String@)">
            <summary>删除文件夹，删除成功返回 true 删除失败返回 false</summary>
            <param name="path">要删除的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>删除成功返回 true 删除失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.SetDirNormal(System.String)">
            <summary>取消文件夹只读属性</summary>
            <param name="inPath">需要取消只读属性的文件夹全路径</param>
            <returns>取消成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.SetAllDirFileNormal(System.String)">
            <summary>取消文件夹内所有文件及文件夹只读属性</summary>
            <param name="inPath">需要取消只读属性的文件夹全路径</param>
            <returns>取消成功返回 true 失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.FsoDelDir(System.String,System.String@)">
            <summary>FSO删除文件夹，删除成功返回 true 删除失败返回 false</summary>
            <param name="path">要删除的文件夹路径，路径末尾必须携带"\"。</param>
            <param name="errStr">发生错误时返回的错误信息</param>
            <returns>删除成功返回 true 删除失败返回 false</returns>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>获取指定目录下所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>获取指定目录下所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String,System.String)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String,System.String)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String,System.String)">
            <summary>获取指定目录下所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String,System.String)">
            <summary>获取指定目录下所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String)">
            <summary>获取指定目录下(子目录深度最大1000级)所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String)">
            <summary>获取指定目录下所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.GetAllDirFiles(System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String)">
            <summary>获取指定目录下所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
        </member>
        <member name="M:App.FileSys.pGetAllDirFiles(System.String,System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Int32@)">
            <summary>获取指定目录下所有文件相对路径及空文件夹相对路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="thispath">根路径</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件相对路径列表</param>
            <param name="paths">返回所有空文件夹相对路径列表</param>
            <param name="lv">当前目录深度</param>
        </member>
        <member name="M:App.FileSys.pGetAllDirFiles(System.String,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Int32@)">
            <summary>获取指定目录下所有文件路径及空文件夹路径，分别返回到files及paths</summary>
            <param name="path">指定目录(物理路径)</param>
            <param name="searchpath">要与path中的目录名匹配的搜索字符串</param>
            <param name="searchfile">要与path中的文件名匹配的搜索字符串</param>
            <param name="dirlv">子目录最大深度</param>
            <param name="files">返回所有文件路径列表</param>
            <param name="paths">返回所有空文件夹路径列表</param>
            <param name="lv">当前目录深度</param>
        </member>
        <member name="T:App.SqlData">
            <summary>Sql Server数据库操作类</summary>
        </member>
        <member name="F:App.SqlData._AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="F:App.SqlData._CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="F:App.SqlData._ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="F:App.SqlData._DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 SqlDbType.Text 其它 字符型</summary>
        </member>
        <member name="M:App.SqlData.#ctor">
            <summary>构造类</summary>
        </member>
        <member name="M:App.SqlData.ConnTest">
            <summary>测试并连接数据库,返回true成功 否则失败</summary>
            <returns>测试并连接数据库,返回true成功 否则失败</returns>
        </member>
        <member name="M:App.SqlData.GetES(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.Int32,System.Int32,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetRow(System.String,System.String[])">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.SqlData.UP(System.String,System.String[])">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.SqlData.GetES(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDT(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetRow(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.SqlData.UP(System.String,System.Collections.Generic.List{System.String})">
            <summary>根据默认数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.SqlData.GetESConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String[])">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">params可变参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetRowConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.SqlData.UPConns(System.String,System.String,System.String[])">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(params可变数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">params可变参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.SqlData.GetESConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一列的第一个参数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>读取数据库并返回第一列的第一个参数</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库返回分页和数据DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="setEachCount">设置每页最大数据行数</param>
            <param name="setDataStart">设置开始数据行数</param>
            <param name="pageNum">设置并返回当前页码</param>
            <param name="outDataCount">返回数据总数</param>
            <param name="outCentCount">返回页面总数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回数据DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetDTConns(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回DataTable(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="dataStart">开始的行索引</param>
            <param name="cachCount">取的最大行数</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回DataTable</returns>
        </member>
        <member name="M:App.SqlData.GetRowConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串读取数据库并返回第一行数据DataRow，如果没有任何数据行将返回null(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回第一行数据DataRow</returns>
        </member>
        <member name="M:App.SqlData.UPConns(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>指定数据库连接字符串更新数据库并返回操作成功行数(string类型List数组传递参数)</summary>
            <param name="sql">要执行的sql语句</param>
            <param name="conns">数据库连接字符串</param>
            <param name="param">string类型List参数数组</param>
            <returns>返回操作成功行数</returns>
        </member>
        <member name="M:App.SqlData.GetSqlComPar(System.String[])">
            <summary>根据ArrayList返回SqlCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlComArr(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回SqlCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlParCom(System.String[])">
            <summary>根据ArrayList返回SqlCommand(params可变数组传递参数)</summary>
            <param name="param">params可变参数数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlArrCom(System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回SqlCommand(string类型List数组传递参数)</summary>
            <param name="param">string类型List数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlParCom(System.Collections.Generic.List{System.Int32},System.String[])">
            <summary>根据ArrayList返回SqlCommand(params可变数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">params可变参数数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlArrCom(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.String})">
            <summary>根据ArrayList返回SqlCommand(string类型List数组传递参数)</summary>
            <param name="dataTypes">对应索引数据参数操作类型数组</param>
            <param name="param">string类型List数组</param>
            <returns>返回一个SqlCommand</returns>
        </member>
        <member name="M:App.SqlData.GetSqlFormat(System.String)">
            <summary>将Sql语句中的?按照顺序替换成@Par + i格式并返回</summary>
            <param name="sql">需要替换的Sql语句</param>
            <returns>返回已替换完成的Sql语句</returns>
        </member>
        <member name="P:App.SqlData.AcceptChangesDuringFill">
            <summary>该值为false则将新添加的行作为插入的行处理。(默认值：true)</summary>
        </member>
        <member name="P:App.SqlData.CommandTimeout">
            <summary>获取或设置执行的SQL语句或存储过程在终止对执行命令的尝试并生成错误之前的等待时间，以秒为单位(默认值：30)</summary>
        </member>
        <member name="P:App.SqlData.ConnString">
            <summary>获取或设置数据库连接字符串(默认值：空字符串)</summary>
        </member>
        <member name="P:App.SqlData.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 SqlDbType.Text 其它 字符型</summary>
        </member>
        <member name="T:App.Des">
            <summary>DES算法静态加密类</summary> 
        </member>
        <member name="F:App.Des.DesKey">
            <summary>设置或获取静态加密或解密密匙16进制字符串(默认值：FFD0BB90ED36B735)</summary> 
        </member>
        <member name="F:App.Des.DesKeyIv">
            <summary>设置或获取静态加密或解密初始向量字符串16进制字符串(默认值：A289BF6797FBA9A7)</summary> 
        </member>
        <member name="M:App.Des.CreateKey">
            <summary>为DES算法静态加密类创建随即密匙及随即初始化向量</summary>
        </member>
        <member name="M:App.Des.CreateKey(System.String@,System.String@)">
            <summary>创建DES算法随即密匙及随即初始化向量</summary>
            <param name="keys">输出已创建的密匙</param>
            <param name="ivs">输出已创建的初始化向量</param>
        </member>
        <member name="M:App.Des.DesEn(System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.DesEn(System.String,System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.DesEn(System.String,System.String,System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.DesEn(System.String,System.Byte[],System.Byte[])">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.DesDe(System.String)">
            <summary>DES解密字符串及加解密配置类，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DesDe(System.String,System.String)">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DesDe(System.String,System.String,System.String)">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DesDe(System.String,System.Byte[],System.Byte[])">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.EnDes(System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.EnDes(System.String,System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.EnDes(System.String,System.String,System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.EnDes(System.String,System.Byte[],System.Byte[])">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.Des.DeDes(System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DeDes(System.String,System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DeDes(System.String,System.String,System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.DeDes(System.String,System.Byte[],System.Byte[])">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.Des.FileDesEn(System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesEn(System.String,System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesEn(System.String,System.String,System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesEn(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesDe(System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesDe(System.String,System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesDe(System.String,System.String,System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.Des.FileDesDe(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="T:App.XmlInfo">
            <summary>XML文件操作类</summary>
        </member>
        <member name="F:App.XmlInfo._document">
            <summary>获取或设置Xml对象(默认值：new XmlDocument())</summary>
        </member>
        <member name="F:App.XmlInfo._xmlPath">
            <summary>获取或设置Xml文件路径(默认值：空字符串)</summary>
        </member>
        <member name="F:App.XmlInfo._nodePath">
            <summary>获取或设置Xml节点路径(默认值：空字符串)</summary>
        </member>
        <member name="F:App.XmlInfo.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.XmlInfo.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.XmlInfo.#ctor">
            <summary>构造类</summary>
        </member>
        <member name="M:App.XmlInfo.#ctor(System.String)">
            <summary>使用Xml文件路径构造类</summary>
            <param name="xmlPath">Xml文件路径</param>
        </member>
        <member name="M:App.XmlInfo.#ctor(System.String,System.String)">
            <summary>使用Xml文件路径和Xml节点路径构造类</summary>
            <param name="xmlPath">Xml文件路径</param>
            <param name="nodePath">Xml节点路径</param>
        </member>
        <member name="M:App.XmlInfo.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.XmlInfo.Out">
            <summary>返回指定路径XML文档的全部内容</summary>
            <returns>返回指定路径XML文档的全部内容</returns>
        </member>
        <member name="M:App.XmlInfo.GetNode(System.String)">
            <summary>返回XML中符合指定节点名称的内容，返回(List(string)集合)</summary>
            <param name="nodeName">节点名称</param>
            <returns>返回XML中符合指定节点名称的内容，返回(List(string)集合)</returns>
        </member>
        <member name="M:App.XmlInfo.GetNode(System.Int32,System.Int32,System.String)">
            <summary>返回XML中指定索引节点的内容</summary>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="childNodeIndex">指定索引处的节点的子节点索引</param>
            <param name="path">节点路径</param>
            <returns>返回XML中指定索引节点的内容</returns>
        </member>
        <member name="M:App.XmlInfo.GetNode(System.Int32,System.Int32)">
            <summary>返回当前Xml节点路径的指定索引节点的内容</summary>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="childNodeIndex">指定索引处的节点的子节点索引</param>
            <returns>返回XML中指定索引节点的内容</returns>
        </member>
        <member name="M:App.XmlInfo.GetNode(System.String,System.Int32,System.String)">
            <summary>返回当前Xml节点路径的指定节点名称的内容</summary>
            <param name="nodePath">节点路径</param>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="nodeName">节点名称</param>
            <returns>返回当前Xml节点路径的指定节点名称的内容</returns>
        </member>
        <member name="M:App.XmlInfo.GetNode(System.Int32,System.String)">
            <summary>返回XML中指定索引节点的内容</summary>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="nodeName">节点名称</param>
            <returns>返回XML中指定索引节点的内容</returns>
        </member>
        <member name="M:App.XmlInfo.Count(System.String)">
            <summary>返回符合指定名称的节点总数</summary>
            <param name="nodeName">节点名称</param>
            <returns>返回符合指定名称的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.Count">
            <summary>返回当前Xml节点路径的节点总数</summary>       
            <returns>返回当前Xml节点路径的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.CountChilds(System.String,System.Int32)">
            <summary>返回符合指定节点名称的指定索引处的节点的子节点总数</summary>
            <param name="nodeName">节点名称</param>
            <param name="nodeIndex">指定索引处的节点</param>
            <returns>返回符合指定节点名称的指定索引处的节点的子节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.CountChilds(System.String)">
            <summary>返回符合指定名称的节点的子节点总数</summary>
            <param name="nodeName">节点名称</param>
            <returns>返回符合指定名称的节点的子节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.SetNode(System.String,System.String)">
            <summary>设置所有符合指定名称的节点的值并返回更改的节点总数</summary>
            <param name="nodeName">节点名称</param>
            <param name="newValue">新值</param>
            <returns>返回更改的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.SetNode(System.String,System.Int32,System.String,System.String)">
            <summary>设置指定路径的指定索引节点的所有符合名称的节点值并返回更改的节点总数</summary>
            <param name="nodePath">节点路径</param>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="nodeName">节点名称</param>
            <param name="newValue">新值</param>
            <returns>返回更改的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.SetNode(System.Int32,System.String,System.String)">
            <summary>设置当前路径的指定索引节点的所有符合名称的节点值并返回更改的节点总数</summary>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="nodeName">节点名称</param>
            <param name="newValue">新值</param>
            <returns>返回更改的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.InsetNode(System.String,System.String,System.String)">
            <summary>在指定的父节点名称下插入一个子节点并返回插入的节点总数</summary>
            <param name="parentName">父节点</param>
            <param name="nodeName">子节点名</param>
            <param name="nodeVale">子节点值</param>
            <returns>返回插入的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.InsetNode(System.Int32,System.String,System.String,System.String)">
            <summary>在指定的父节点名称下的指定指定索引处的节点插入一个子节点，插入成功返回true否则返回false</summary>
            <param name="nodeIndex">指定索引处的节点</param>
            <param name="parentName">父节点</param>
            <param name="nodeName">子节点名</param>
            <param name="nodeValue">子节点值</param>
            <returns>插入成功返回true否则返回false</returns>
        </member>
        <member name="M:App.XmlInfo.InsertRootNode(System.String,System.String[],System.String[])">
            <summary>插入根节点并在根节点下插入子节点集合,返回插入的子节点总数</summary>
            <param name="rootName">节点名</param>
            <param name="nodeName">子节点名</param>
            <param name="nodeValue">子节点值</param>
            <returns>返回插入的子节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.DeleteNote(System.String,System.String)">
            <summary>删除所有符合名称的父节点下符合名称的子节点并返回删除的节点总数</summary>
            <param name="parentName">父节点名称</param>
            <param name="noteName">需要删除的子节点名称</param>
            <returns>返回删除的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.DeleteNode(System.String)">
            <summary>删除所有符合名称的节点并返回删除的节点总数</summary>
            <param name="parmentName">节点名称</param>
            <returns>返回删除的节点总数</returns>
        </member>
        <member name="M:App.XmlInfo.Clear">
            <summary>删除当前xml文档所有节点，删除成功返回true否则返回false</summary>
            <returns>删除成功返回true否则返回false</returns>
        </member>
        <member name="M:App.XmlInfo.Save">
            <summary>保存当前xml文档</summary>
        </member>
        <member name="M:App.XmlInfo.Save(System.String)">
            <summary>保存当前xml文档</summary>
            <param name="xmlPath">保存路径</param>
        </member>
        <member name="P:App.XmlInfo.Document">
            <summary>获取或设置Xml对象(默认值：new XmlDocument())</summary>
        </member>
        <member name="P:App.XmlInfo.XmlPath">
            <summary>获取或设置Xml文件路径</summary>
        </member>
        <member name="P:App.XmlInfo.NodePath">
            <summary>获取或设置Xml节点路径</summary>
        </member>
        <member name="T:App.DataOften">
            <summary>数据集常用静态操作类</summary>
        </member>
        <member name="M:App.DataOften.SqlAddArr(System.String,System.String,System.String,System.Text.StringBuilder@,System.Collections.Generic.List{System.String}@)">
            <summary>合并Sql语句并添加Sql查询参数数组</summary>
            <param name="SqlStr">需要合并的Sql语句</param>
            <param name="ValStr">需要添加的参数值</param>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="ArrStr">需要更新并输出的Sql查询参数数组</param>
            <param name="JoStr">Sql合并时的连接语句</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddArr(System.String,System.String,System.Text.StringBuilder@,System.Collections.Generic.List{System.String}@)">
            <summary>合并Sql语句并添加Sql查询参数数组</summary>
            <param name="SqlStr">需要合并的Sql语句</param>
            <param name="ValStr">需要添加的参数值</param>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="ArrStr">需要更新并输出的Sql查询参数数组</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddArr(System.String,System.String,System.Text.StringBuilder@,System.Collections.Generic.List{System.String}@,System.String[])">
            <summary>合并Sql语句并添加Sql查询参数数组</summary>
            <param name="SqlStr">需要合并的Sql语句</param>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="ArrStr">需要更新并输出的Sql查询参数数组</param>
            <param name="JoStr">Sql合并时的连接语句</param>
            <param name="Params">需要添加的params可变参数数组</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddArr(System.String,System.Text.StringBuilder@,System.Collections.Generic.List{System.String}@,System.String[])">
            <summary>合并Sql语句并添加Sql查询参数数组</summary>
            <param name="SqlStr">需要合并的Sql语句</param>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="ArrStr">需要更新并输出的Sql查询参数数组</param>
            <param name="Params">需要添加的params可变参数数组</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddWhere(System.Text.StringBuilder@)">
            <summary>如果Sql语句长度大于0，则在其前面插入 where</summary>
            <param name="Str">需要更新并输出的Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddSql(System.Text.StringBuilder@,System.String)">
            <summary>如果Sql语句长度大于0，则在其前面插入指定字符串</summary>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="iStr">需要插入的字符串</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.SqlAddSql(System.Text.StringBuilder@,System.String,System.String)">
            <summary>追加指定Sql语句,如果Sql语句长度大于0，则在其前面插入指定字符串</summary>
            <param name="Str">需要更新并输出的Sql语句</param>
            <param name="addStr">需要追加的Sql语句</param>
            <param name="inStr">需要插入的字符串</param>
            <returns></returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回空字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.String)">
            <summary>获取DataTable内的第一行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>获取DataTable内的指定行的指定列索引的值，如果没有找到指定的列则返回指定字符串</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow,System.String)">
            <summary>获取DataRow指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow,System.Int32)">
            <summary>获取DataRow指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.String)">
            <summary>获取DataRow数组第一行指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.Int32)">
            <summary>获取DataRow数组第一行指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.String,System.Int32)">
            <summary>获取DataRow数组指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.Int32,System.Int32)">
            <summary>获取DataRow数组指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow,System.String,System.String)">
            <summary>获取DataRow指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow,System.Int32,System.String)">
            <summary>获取DataRow指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.String,System.String)">
            <summary>获取DataRow数组第一行指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.Int32,System.String)">
            <summary>获取DataRow数组第一行指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.String,System.Int32,System.String)">
            <summary>获取DataRow数组指定行的指定列的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStr(System.Data.DataRow[],System.Int32,System.Int32,System.String)">
            <summary>获取DataRow数组指定行的指定列索引的值，并删除左右空白。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow,System.String)">
            <summary>获取DataRow指定列的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow,System.Int32)">
            <summary>获取DataRow指定列索引的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.String)">
            <summary>获取DataRow数组第一行指定列的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.Int32)">
            <summary>获取DataRow数组第一行指定列索引的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.String,System.Int32)">
            <summary>获取DataRow数组指定行的指定列的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.Int32,System.Int32)">
            <summary>获取DataRow数组指定行的指定列索引的值。如果没有找到指定的列则返回空字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow,System.String,System.String)">
            <summary>获取DataRow指定列的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow,System.Int32,System.String)">
            <summary>获取DataRow指定列索引的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.String,System.String)">
            <summary>获取DataRow数组第一行指定列的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.Int32,System.String)">
            <summary>获取DataRow数组第一行指定列索引的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.String,System.Int32,System.String)">
            <summary>获取DataRow数组指定行的指定列的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetStrs(System.Data.DataRow[],System.Int32,System.Int32,System.String)">
            <summary>获取DataRow数组指定行的指定列索引的值。如果没有找到指定的列则返回指定字符串</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <param name="defStr">默认值</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值，并删除左右空白。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值。</summary>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String)">
            <summary>获取DataTable内的第一行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32)">
            <summary>获取DataTable内的第一行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataTable内的第一行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.String,System.Int32)">
            <summary>获取DataTable内的指定行的指定列的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.String,System.String,System.Data.DataViewRowState,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>获取DataTable内的指定行的指定列索引的值。</summary>
            <param name="filter">要用来筛选行的条件</param>
            <param name="sort">一个字符串，它指定列和排序方向</param>
            <param name="dvrs">DataViewRowState 值之一</param>
            <param name="DT">一个DataTable实例的引用</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataTable内的指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow,System.String)">
            <summary>获取DataRow指定列的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow,System.Int32)">
            <summary>获取DataRow指定列索引的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow[],System.String)">
            <summary>获取DataRow数组第一行指定列的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow[],System.Int32)">
            <summary>获取DataRow数组第一行指定列索引的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow[],System.String,System.Int32)">
            <summary>获取DataRow数组指定行的指定列的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVal(System.Data.DataRow[],System.Int32,System.Int32)">
            <summary>获取DataRow数组指定行的指定列索引的值，并删除左右空白。</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow,System.String)">
            <summary>获取DataRow指定列的值。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow,System.Int32)">
            <summary>获取DataRow指定列索引的值。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow[],System.String)">
            <summary>获取DataRow数组第一行指定列的值。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColName">列名</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow[],System.Int32)">
            <summary>获取DataRow数组第一行指定列索引的值。</summary>
            <param name="dr">一个DataRow</param>
            <param name="ColIndex">列的索引</param>
            <returns>返回DataRow指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow[],System.String,System.Int32)">
            <summary>获取DataRow数组指定行的指定列的值。</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColName">列名</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列的值</returns>
        </member>
        <member name="M:App.DataOften.GetVals(System.Data.DataRow[],System.Int32,System.Int32)">
            <summary>获取DataRow数组指定行的指定列索引的值。</summary>
            <param name="dr">一个DataRow数组</param>
            <param name="ColIndex">列的索引</param>
            <param name="RowIndex">行的索引</param>
            <returns>返回DataRow指定行的指定列索引的值</returns>
        </member>
        <member name="M:App.DataOften.GetIntListVal(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>返回正整数列表中指定索引值,如果未找到指定索引则返回-1</summary>
            <param name="li">列表</param>
            <param name="index">索引</param>
            <returns>返回正整数列表中指定索引值</returns>
        </member>
        <member name="M:App.DataOften.GetDataSet(System.Data.DataTable,System.String)">
            <summary>将一个DataTable插入到DataSet内并返回</summary>
            <param name="dt">一个DataTable</param>
            <param name="tableName">DataTable名称</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:App.DataOften.GetDataSet(System.Data.DataTable)">
            <summary>将一个DataTable插入到DataSet内并返回</summary>
            <param name="dt">一个DataTable</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:App.DataOften.GetTable(System.Data.DataRow[],System.Data.DataTable)">
            <summary>根据DataRow数组返回指定内存表构架的DataTable</summary>
            <param name="drs">DataRow数组</param>
            <param name="dt">需要拷贝构架的内存表</param>
            <returns>根据数据行数组返回DataTable</returns>
        </member>
        <member name="M:App.DataOften.GetTable(System.Data.DataRow[])">
            <summary>根据DataRow数组返回DataTable</summary>
            <param name="drs">DataRow数组</param>
            <returns>根据数据行数组返回DataTable</returns>
        </member>
        <member name="M:App.DataOften.CopyTable(System.Data.DataRow[],System.Data.DataTable,System.Data.DataTable)">
            <summary>将DataRow数组拷贝到指定内存表构架的DataTable</summary>
            <param name="drs">DataRow数组</param>
            <param name="cdt">需要复制数据的内存表</param>
            <param name="dt">需要拷贝构架的内存表</param>
        </member>
        <member name="M:App.DataOften.CopyTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>将指定的DataTable内的数据和构架拷贝到指定内存表</summary>
            <param name="dt">需要拷贝构架的内存表</param>
            <param name="cdt">需要复制数据的内存表</param>
        </member>
        <member name="M:App.DataOften.CopyTable(System.Data.DataView,System.Data.DataTable)">
            <summary>将指定的DataView内的数据和构架拷贝到指定内存表</summary>
            <param name="dv">需要拷贝数据和构架的DataView</param>
            <param name="cdt">需要复制数据的内存表</param>
        </member>
        <member name="M:App.DataOften.GetIds(System.Data.DataTable,System.String)">
            <summary>返回指定内存表不重复id集合</summary>
            <param name="rdt">包含id字段的内存表</param>
            <param name="idName">id字段名称</param>
            <returns>返回指定内存表不重复id集合</returns>
        </member>
        <member name="M:App.DataOften.GetUsers(System.Data.DataTable,System.String)">
            <summary>返回指定内存表不重复用户名集合</summary>
            <param name="rdt">包含用户名字段的内存表</param>
            <param name="idName">用户名字段名称</param>
            <returns>返回指定内存表不重复用户名集合</returns>
        </member>
        <member name="T:App.SqlOper">
            <summary>Sql语句操作类</summary>
        </member>
        <member name="F:App.SqlOper.Mode">
            <summary>
            操作模式,0=插入 1=更新 2=插入或更新(默认值:0)
            </summary>
        </member>
        <member name="F:App.SqlOper.Is">
            <summary>
            sql插入sql
            </summary>
        </member>
        <member name="F:App.SqlOper.Us">
            <summary>
            sql更新sql
            </summary>
        </member>
        <member name="F:App.SqlOper.Vs">
            <summary>
            sql插入值
            </summary>
        </member>
        <member name="F:App.SqlOper.DataTypes">
            <summary>获取或设置对应索引数据参数操作类型,1 长字符串 其它 字符型</summary>
        </member>
        <member name="F:App.SqlOper.Ps">
            <summary>
            参数数组
            </summary>
        </member>
        <member name="F:App.SqlOper._Sels">
            <summary>获取或设置字段名列表(默认值：空字符串)</summary>
        </member>
        <member name="M:App.SqlOper.#ctor">
            <summary>
            构造类
            </summary>
        </member>
        <member name="M:App.SqlOper.#ctor(System.Byte)">
            <summary>
            指定操作模式构造类
            </summary>
            <param name="mode">操作模式,0=插入 1=更新 2=插入或更新</param>
        </member>
        <member name="M:App.SqlOper.#ctor(System.String)">
            <summary>
            指定字段名列表构造类
            </summary>
            <param name="names">需要添加的字段名列表</param>
        </member>
        <member name="M:App.SqlOper.#ctor(System.String,System.String)">
            <summary>
            指定字段名列表与分隔符构造类
            </summary>
            <param name="names">需要添加的字段名列表</param>
            <param name="ands">分隔符</param>
        </member>
        <member name="M:App.SqlOper.ClearSels">
            <summary>
            清空字段名列表Sels
            </summary>
        </member>
        <member name="M:App.SqlOper.AddSels(System.String,System.String)">
            <summary>
            指定分隔符添加字段名列表Sels
            </summary>
            <param name="names">需要添加的字段名列表</param>
            <param name="ands">分隔符</param>
        </member>
        <member name="M:App.SqlOper.OperSql(System.String,System.String)">
            <summary>
            sql语句及表达式处理
            </summary>
            <param name="fname">Sql字段名</param>
            <param name="sqls">Sql表达式</param>
        </member>
        <member name="M:App.SqlOper.Operp(System.String,System.String)">
            <summary>
            sql处理
            </summary>
            <param name="pval">参数值</param>
            <param name="fname">Sql字段名</param>
        </member>
        <member name="M:App.SqlOper.Operp(System.String,System.String,System.String)">
            <summary>
            sql处理
            </summary>
            <param name="pval">参数值</param>
            <param name="fname">Sql字段名</param>
            <param name="fval">值表达式</param>
        </member>
        <member name="M:App.SqlOper.Operp(System.String,System.String,System.Int32)">
            <summary>
            sql处理
            </summary>
            <param name="pval">参数值</param>
            <param name="fname">Sql字段名</param>
            <param name="dataTypes">值类型,1 长字符串 其它 字符型</param>
        </member>
        <member name="M:App.SqlOper.Operp(System.String,System.String,System.String,System.Int32)">
            <summary>
            sql处理
            </summary>
            <param name="pval">参数值</param>
            <param name="fname">Sql字段名</param>
            <param name="fval">值表达式</param>
            <param name="dataTypes">值类型,1 长字符串 其它 字符型</param>
        </member>
        <member name="P:App.SqlOper.Sels">
            <summary>获取或设置字段名列表(默认值：空字符串)</summary>
        </member>
        <member name="T:App.SysDelegate">
            <summary>Sys委托类</summary>
        </member>
        <member name="T:App.SysDelegate.Del_SevenZipFileNames">
            <summary>执行SevenZip解压或压缩文件操作时，每次解压或压缩一项操作完成引发事件的操作方法委托</summary>
            <param name="fileName">文件名称（包含路径）</param>
            <param name="percentDone">操作进度（0-100）</param>
        </member>
        <member name="T:App.SysDelegate.Del_SharpZipFileNames">
            <summary>执行SharpZip解压或压缩文件操作时，每次解压或压缩一项操作完成引发事件的操作方法委托</summary>
            <param name="fileName">文件名称（包含路径）</param>
        </member>
        <member name="T:App.ByteEncode">
            <summary>字节流编码类型操作类</summary> 
        </member>
        <member name="F:App.ByteEncode._EnArr">
            <summary>设置或获取所有可能的编码数组</summary> 
        </member>
        <member name="F:App.ByteEncode._IsAscii">
            <summary>设置或获取是否检验ASCII false不检验 true检验</summary> 
        </member>
        <member name="F:App.ByteEncode._EnStr">
            <summary>设置或获取最接近的编码之一</summary> 
        </member>
        <member name="F:App.ByteEncode._EnAbsStr">
            <summary>设置或获取已确认的编码</summary> 
        </member>
        <member name="F:App.ByteEncode._IsEnArr">
            <summary>设置或获取是否有多个可能的编码 0 没有 1 唯一  2 多个</summary> 
        </member>
        <member name="F:App.ByteEncode._Lang">
            <summary>默认语言 1 => Japanese 2 => Chinese 3 => Simplified Chinese 4 => Traditional Chinese 5 => Korean 6 => Dont know (default)</summary> 
        </member>
        <member name="F:App.ByteEncode.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.ByteEncode.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.ByteEncode.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.ByteEncode.GetByCode(System.IO.Stream)">
            <summary>已重载，返回Stream对象最接近的编码之一</summary>
            <param name="sr">一个Stream对象</param>
            <returns>返回Stream对象最接近的编码之一</returns>
        </member>
        <member name="M:App.ByteEncode.GetByCode(System.IO.MemoryStream)">
            <summary>已重载，返回MemoryStream对象最接近的编码之一</summary>
            <param name="sr">一个MemoryStream对象</param>
            <returns>返回MemoryStream对象最接近的编码之一</returns>
        </member>
        <member name="M:App.ByteEncode.GetByCode(System.IO.FileStream)">
            <summary>已重载，返回FileStream对象最接近的编码之一</summary>
            <param name="sr">一个FileStream对象</param>
            <returns>返回FileStream对象最接近的编码之一</returns>
        </member>
        <member name="M:App.ByteEncode.GetByCode(System.Byte[])">
            <summary>已重载，返回字节数组对象最接近的编码之一</summary>
            <param name="sr">一个字节数组对象</param>
            <returns>返回字节数组对象最接近的编码之一</returns>
        </member>
        <member name="P:App.ByteEncode.EnArr">
            <summary>设置或获取所有可能的编码数组</summary> 
        </member>
        <member name="P:App.ByteEncode.IsAscii">
            <summary>设置或获取是否检验ASCII false不检验 true检验</summary> 
        </member>
        <member name="P:App.ByteEncode.EnStr">
            <summary>设置或获取最接近的编码之一</summary> 
        </member>
        <member name="P:App.ByteEncode.EnAbsStr">
            <summary>设置或获取已确认的编码</summary> 
        </member>
        <member name="P:App.ByteEncode.IsEnArr">
            <summary>设置或获取是否有多个可能的编码 0 没有 1 唯一  2 多个</summary> 
        </member>
        <member name="P:App.ByteEncode.Lang">
            <summary>默认语言 1 => Japanese 2 => Chinese 3 => Simplified Chinese 4 => Traditional Chinese 5 => Korean 6 => Dont know (default)</summary> 
        </member>
        <member name="T:App.CDOClass">
            <summary>CharsetDetectionObserver接口实例类</summary>
        </member>
        <member name="F:App.CDOClass.Charset">
            <summary>需要检测编码的字符串</summary> 
        </member>
        <member name="M:App.CDOClass.Notify(System.String)">
            <summary>接口实例方法</summary> 
            <param name="charset">需要检测编码的字符串</param>
        </member>
        <member name="T:App.DesInfo">
            <summary>DES算法加密类</summary> 
        </member>
        <member name="F:App.DesInfo._DES">
            <summary>设置或获取DES算法加密对象</summary>
        </member>
        <member name="F:App.DesInfo._Key">
            <summary>设置或获取加密或解密密匙16进制字符串(默认值：Des.DesKey)</summary> 
        </member>
        <member name="F:App.DesInfo._KeyIv">
            <summary>设置或获取加密或解密初始向量16进制字符串(默认值：Des.DesKeyIv)</summary> 
        </member>
        <member name="F:App.DesInfo._ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="F:App.DesInfo._ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="M:App.DesInfo.SetErr(System.Exception)">
            <summary>设置错误属性</summary>
            <param name="vals">Exception 错误对象</param>
        </member>
        <member name="M:App.DesInfo.DesEn(System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesEn(System.String,System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesEn(System.String,System.String,System.String)">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesEn(System.String,System.Byte[],System.Byte[])">
            <summary>DES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesDe(System.String)">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesDe(System.String,System.String)">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesDe(System.String,System.String,System.String)">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DesDe(System.String,System.Byte[],System.Byte[])">
            <summary>DES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.EnDes(System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.EnDes(System.String,System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.EnDes(System.String,System.String,System.String)">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.EnDes(System.String,System.Byte[],System.Byte[])">
            <summary>DES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DeDes(System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DeDes(System.String,System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DeDes(System.String,System.String,System.String)">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.DeDes(System.String,System.Byte[],System.Byte[])">
            <summary>DES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.DesInfo.FileDesEn(System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesEn(System.String,System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesEn(System.String,System.String,System.String,System.String)">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesEn(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>DES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesDe(System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesDe(System.String,System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesDe(System.String,System.String,System.String,System.String)">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.DesInfo.FileDesDe(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>DES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="P:App.DesInfo.DES">
            <summary>设置或获取DES算法加密对象</summary>
        </member>
        <member name="P:App.DesInfo.Key">
            <summary>设置或获取加密或解密密匙16进制字符串(默认值：Des.DesKey)</summary> 
        </member>
        <member name="P:App.DesInfo.KeyIv">
            <summary>设置或获取加密或解密初始向量16进制字符串(默认值：Des.DesKeyIv)</summary> 
        </member>
        <member name="P:App.DesInfo.ExErr">
            <summary>获取或设置发生错误时返回的错误信息</summary>
        </member>
        <member name="P:App.DesInfo.ExBol">
            <summary>获取或设置是否发生错误 值： false 没有错误  true 发生错误</summary>
        </member>
        <member name="T:App.TripleDes">
            <summary>TripleDES(三层DES加密)算法静态加密类</summary> 
        </member>
        <member name="F:App.TripleDes.DesKey">
            <summary>设置或获取静态加密或解密密匙16进制字符串(默认值：90667E012B270429EDC97EF4CB117480232D0423B816BEC5)</summary> 
        </member>
        <member name="F:App.TripleDes.DesKeyIv">
            <summary>设置或获取静态加密或解密初始向量16进制字符串(默认值：1F35A0C096CEA5DF)</summary> 
        </member>
        <member name="M:App.TripleDes.CreateKey">
            <summary>为TripleDES算法静态加密类创建随即密匙及随即初始化向量</summary>
        </member>
        <member name="M:App.TripleDes.CreateKey(System.String@,System.String@)">
            <summary>创建TripleDES算法随即密匙及随即初始化向量</summary>
            <param name="keys">输出已创建的密匙</param>
            <param name="ivs">输出已创建的初始化向量</param>
        </member>
        <member name="M:App.TripleDes.DesEn(System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesEn(System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesEn(System.String,System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesEn(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密字符串，加密失败返回空字符串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesDe(System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesDe(System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesDe(System.String,System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DesDe(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密字符串，解密失败返回空字符串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.EnDes(System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.EnDes(System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.EnDes(System.String,System.String,System.String)">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.EnDes(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密字符串，加密失败返回原串</summary>
            <param name="inStr">需要加密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已加密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DeDes(System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DeDes(System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DeDes(System.String,System.String,System.String)">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.DeDes(System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密字符串，解密失败返回原串</summary>
            <param name="inStr">需要解密字符串</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>返回已解密的字符串</returns>
        </member>
        <member name="M:App.TripleDes.FileDesEn(System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesEn(System.String,System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesEn(System.String,System.String,System.String,System.String)">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesEn(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES加密文件</summary>
            <param name="inFilePath">需要加密的文件地址</param>
            <param name="outFilePath">加密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>加密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesDe(System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesDe(System.String,System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesDe(System.String,System.String,System.String,System.String)">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙</param>
            <param name="ivs">位移向量</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
        <member name="M:App.TripleDes.FileDesDe(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>TripleDES解密文件</summary>
            <param name="inFilePath">需要解密的文件地址</param>
            <param name="outFilePath">解密后保存的文件地址</param>
            <param name="keys">密匙数组</param>
            <param name="ivs">位移向量数组</param>
            <returns>解密成功返回 true 否则返回 false</returns>
        </member>
    </members>
</doc>
